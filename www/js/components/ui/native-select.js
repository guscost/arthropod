define(["require", "exports", "react/jsx-runtime", "lucide-react", "@/lib/utils"], function (require, exports, jsx_runtime_1, lucide_react_1, utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NativeSelect = NativeSelect;
    exports.NativeSelectOptGroup = NativeSelectOptGroup;
    exports.NativeSelectOption = NativeSelectOption;
    function NativeSelect({ className, ...props }) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "group/native-select relative w-fit has-[select:disabled]:opacity-50", "data-slot": "native-select-wrapper", children: [(0, jsx_runtime_1.jsx)("select", { "data-slot": "native-select", className: (0, utils_1.cn)("border-input placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 dark:hover:bg-input/50 h-9 w-full min-w-0 appearance-none rounded-md border bg-transparent px-3 py-2 pr-9 text-sm shadow-xs transition-[color,box-shadow] outline-none disabled:pointer-events-none disabled:cursor-not-allowed", "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]", "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive", className), ...props }), (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDownIcon, { className: "text-muted-foreground pointer-events-none absolute top-1/2 right-3.5 size-4 -translate-y-1/2 opacity-50 select-none", "aria-hidden": "true", "data-slot": "native-select-icon" })] }));
    }
    function NativeSelectOption({ ...props }) {
        return (0, jsx_runtime_1.jsx)("option", { "data-slot": "native-select-option", ...props });
    }
    function NativeSelectOptGroup({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)("optgroup", { "data-slot": "native-select-optgroup", className: (0, utils_1.cn)(className), ...props }));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXNlbGVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL25hdGl2ZS1zZWxlY3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQStDUyxvQ0FBWTtJQUFFLG9EQUFvQjtJQUFFLGdEQUFrQjtJQTFDL0QsU0FBUyxZQUFZLENBQUMsRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLEVBQWtDO1FBQzNFLE9BQU8sQ0FDTCxpQ0FDRSxTQUFTLEVBQUMscUVBQXFFLGVBQ3JFLHVCQUF1QixhQUVqQyxnREFDWSxlQUFlLEVBQ3pCLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFDWCx3VkFBd1YsRUFDeFYsK0VBQStFLEVBQy9FLHdHQUF3RyxFQUN4RyxTQUFTLENBQ1YsS0FDRyxLQUFLLEdBQ1QsRUFDRix1QkFBQyw4QkFBZSxJQUNkLFNBQVMsRUFBQyxxSEFBcUgsaUJBQ25ILE1BQU0sZUFDUixvQkFBb0IsR0FDOUIsSUFDRSxDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxrQkFBa0IsQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFrQztRQUN0RSxPQUFPLGdEQUFrQixzQkFBc0IsS0FBSyxLQUFLLEdBQUksQ0FBQztJQUNoRSxDQUFDO0lBRUQsU0FBUyxvQkFBb0IsQ0FBQyxFQUM1QixTQUFTLEVBQ1QsR0FBRyxLQUFLLEVBQ3lCO1FBQ2pDLE9BQU8sQ0FDTCxrREFDWSx3QkFBd0IsRUFDbEMsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLFNBQVMsQ0FBQyxLQUNwQixLQUFLLEdBQ1QsQ0FDSCxDQUFDO0lBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ2hldnJvbkRvd25JY29uIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuXG5pbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiO1xuXG5mdW5jdGlvbiBOYXRpdmVTZWxlY3QoeyBjbGFzc05hbWUsIC4uLnByb3BzIH06IFJlYWN0LkNvbXBvbmVudFByb3BzPFwic2VsZWN0XCI+KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPVwiZ3JvdXAvbmF0aXZlLXNlbGVjdCByZWxhdGl2ZSB3LWZpdCBoYXMtW3NlbGVjdDpkaXNhYmxlZF06b3BhY2l0eS01MFwiXG4gICAgICBkYXRhLXNsb3Q9XCJuYXRpdmUtc2VsZWN0LXdyYXBwZXJcIlxuICAgID5cbiAgICAgIDxzZWxlY3RcbiAgICAgICAgZGF0YS1zbG90PVwibmF0aXZlLXNlbGVjdFwiXG4gICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgICAgXCJib3JkZXItaW5wdXQgcGxhY2Vob2xkZXI6dGV4dC1tdXRlZC1mb3JlZ3JvdW5kIHNlbGVjdGlvbjpiZy1wcmltYXJ5IHNlbGVjdGlvbjp0ZXh0LXByaW1hcnktZm9yZWdyb3VuZCBkYXJrOmJnLWlucHV0LzMwIGRhcms6aG92ZXI6YmctaW5wdXQvNTAgaC05IHctZnVsbCBtaW4tdy0wIGFwcGVhcmFuY2Utbm9uZSByb3VuZGVkLW1kIGJvcmRlciBiZy10cmFuc3BhcmVudCBweC0zIHB5LTIgcHItOSB0ZXh0LXNtIHNoYWRvdy14cyB0cmFuc2l0aW9uLVtjb2xvcixib3gtc2hhZG93XSBvdXRsaW5lLW5vbmUgZGlzYWJsZWQ6cG9pbnRlci1ldmVudHMtbm9uZSBkaXNhYmxlZDpjdXJzb3Itbm90LWFsbG93ZWRcIixcbiAgICAgICAgICBcImZvY3VzLXZpc2libGU6Ym9yZGVyLXJpbmcgZm9jdXMtdmlzaWJsZTpyaW5nLXJpbmcvNTAgZm9jdXMtdmlzaWJsZTpyaW5nLVszcHhdXCIsXG4gICAgICAgICAgXCJhcmlhLWludmFsaWQ6cmluZy1kZXN0cnVjdGl2ZS8yMCBkYXJrOmFyaWEtaW52YWxpZDpyaW5nLWRlc3RydWN0aXZlLzQwIGFyaWEtaW52YWxpZDpib3JkZXItZGVzdHJ1Y3RpdmVcIixcbiAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICl9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgIC8+XG4gICAgICA8Q2hldnJvbkRvd25JY29uXG4gICAgICAgIGNsYXNzTmFtZT1cInRleHQtbXV0ZWQtZm9yZWdyb3VuZCBwb2ludGVyLWV2ZW50cy1ub25lIGFic29sdXRlIHRvcC0xLzIgcmlnaHQtMy41IHNpemUtNCAtdHJhbnNsYXRlLXktMS8yIG9wYWNpdHktNTAgc2VsZWN0LW5vbmVcIlxuICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICBkYXRhLXNsb3Q9XCJuYXRpdmUtc2VsZWN0LWljb25cIlxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gTmF0aXZlU2VsZWN0T3B0aW9uKHsgLi4ucHJvcHMgfTogUmVhY3QuQ29tcG9uZW50UHJvcHM8XCJvcHRpb25cIj4pIHtcbiAgcmV0dXJuIDxvcHRpb24gZGF0YS1zbG90PVwibmF0aXZlLXNlbGVjdC1vcHRpb25cIiB7Li4ucHJvcHN9IC8+O1xufVxuXG5mdW5jdGlvbiBOYXRpdmVTZWxlY3RPcHRHcm91cCh7XG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPFwib3B0Z3JvdXBcIj4pIHtcbiAgcmV0dXJuIChcbiAgICA8b3B0Z3JvdXBcbiAgICAgIGRhdGEtc2xvdD1cIm5hdGl2ZS1zZWxlY3Qtb3B0Z3JvdXBcIlxuICAgICAgY2xhc3NOYW1lPXtjbihjbGFzc05hbWUpfVxuICAgICAgey4uLnByb3BzfVxuICAgIC8+XG4gICk7XG59XG5cbmV4cG9ydCB7IE5hdGl2ZVNlbGVjdCwgTmF0aXZlU2VsZWN0T3B0R3JvdXAsIE5hdGl2ZVNlbGVjdE9wdGlvbiB9O1xuIl19