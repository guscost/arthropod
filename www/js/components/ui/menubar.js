define(["require", "exports", "react/jsx-runtime", "react", "@radix-ui/react-menubar", "lucide-react", "@/lib/utils"], function (require, exports, jsx_runtime_1, React, MenubarPrimitive, lucide_react_1, utils_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MenubarShortcut = exports.MenubarSub = exports.MenubarGroup = exports.MenubarSubTrigger = exports.MenubarSubContent = exports.MenubarPortal = exports.MenubarRadioItem = exports.MenubarRadioGroup = exports.MenubarCheckboxItem = exports.MenubarLabel = exports.MenubarSeparator = exports.MenubarItem = exports.MenubarContent = exports.MenubarTrigger = exports.MenubarMenu = exports.Menubar = void 0;
    const MenubarMenu = MenubarPrimitive.Menu;
    exports.MenubarMenu = MenubarMenu;
    const MenubarGroup = MenubarPrimitive.Group;
    exports.MenubarGroup = MenubarGroup;
    const MenubarPortal = MenubarPrimitive.Portal;
    exports.MenubarPortal = MenubarPortal;
    const MenubarSub = MenubarPrimitive.Sub;
    exports.MenubarSub = MenubarSub;
    const MenubarRadioGroup = MenubarPrimitive.RadioGroup;
    exports.MenubarRadioGroup = MenubarRadioGroup;
    const Menubar = React.forwardRef(({ className, ...props }, ref) => ((0, jsx_runtime_1.jsx)(MenubarPrimitive.Root, { ref: ref, className: (0, utils_1.cn)("flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm", className), ...props })));
    exports.Menubar = Menubar;
    Menubar.displayName = MenubarPrimitive.Root.displayName;
    const MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => ((0, jsx_runtime_1.jsx)(MenubarPrimitive.Trigger, { ref: ref, className: (0, utils_1.cn)("flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground", className), ...props })));
    exports.MenubarTrigger = MenubarTrigger;
    MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;
    const MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => ((0, jsx_runtime_1.jsxs)(MenubarPrimitive.SubTrigger, { ref: ref, className: (0, utils_1.cn)("flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground", inset && "pl-8", className), ...props, children: [children, (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, { className: "ml-auto h-4 w-4" })] })));
    exports.MenubarSubTrigger = MenubarSubTrigger;
    MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;
    const MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => ((0, jsx_runtime_1.jsx)(MenubarPrimitive.SubContent, { ref: ref, className: (0, utils_1.cn)("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", className), ...props })));
    exports.MenubarSubContent = MenubarSubContent;
    MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;
    const MenubarContent = React.forwardRef(({ className, align = "start", alignOffset = -4, sideOffset = 8, ...props }, ref) => ((0, jsx_runtime_1.jsx)(MenubarPrimitive.Portal, { children: (0, jsx_runtime_1.jsx)(MenubarPrimitive.Content, { ref: ref, align: align, alignOffset: alignOffset, sideOffset: sideOffset, className: (0, utils_1.cn)("z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", className), ...props }) })));
    exports.MenubarContent = MenubarContent;
    MenubarContent.displayName = MenubarPrimitive.Content.displayName;
    const MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => ((0, jsx_runtime_1.jsx)(MenubarPrimitive.Item, { ref: ref, className: (0, utils_1.cn)("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", inset && "pl-8", className), ...props })));
    exports.MenubarItem = MenubarItem;
    MenubarItem.displayName = MenubarPrimitive.Item.displayName;
    const MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => ((0, jsx_runtime_1.jsxs)(MenubarPrimitive.CheckboxItem, { ref: ref, className: (0, utils_1.cn)("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className), checked: checked, ...props, children: [(0, jsx_runtime_1.jsx)("span", { className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center", children: (0, jsx_runtime_1.jsx)(MenubarPrimitive.ItemIndicator, { children: (0, jsx_runtime_1.jsx)(lucide_react_1.Check, { className: "h-4 w-4" }) }) }), children] })));
    exports.MenubarCheckboxItem = MenubarCheckboxItem;
    MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;
    const MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => ((0, jsx_runtime_1.jsxs)(MenubarPrimitive.RadioItem, { ref: ref, className: (0, utils_1.cn)("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className), ...props, children: [(0, jsx_runtime_1.jsx)("span", { className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center", children: (0, jsx_runtime_1.jsx)(MenubarPrimitive.ItemIndicator, { children: (0, jsx_runtime_1.jsx)(lucide_react_1.Circle, { className: "h-4 w-4 fill-current" }) }) }), children] })));
    exports.MenubarRadioItem = MenubarRadioItem;
    MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;
    const MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => ((0, jsx_runtime_1.jsx)(MenubarPrimitive.Label, { ref: ref, className: (0, utils_1.cn)("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className), ...props })));
    exports.MenubarLabel = MenubarLabel;
    MenubarLabel.displayName = MenubarPrimitive.Label.displayName;
    const MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => ((0, jsx_runtime_1.jsx)(MenubarPrimitive.Separator, { ref: ref, className: (0, utils_1.cn)("-mx-1 my-1 h-px bg-muted", className), ...props })));
    exports.MenubarSeparator = MenubarSeparator;
    MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;
    const MenubarShortcut = ({ className, ...props }) => {
        return ((0, jsx_runtime_1.jsx)("span", { className: (0, utils_1.cn)("ml-auto text-xs tracking-widest text-muted-foreground", className), ...props }));
    };
    exports.MenubarShortcut = MenubarShortcut;
    MenubarShortcut.displayname = "MenubarShortcut";
});
//# sourceMappingURL=data:application/json;base64,