define(["require", "exports", "react/jsx-runtime", "react-day-picker", "../../lib/utils", "./button", "./scroll-area", "./select"], function (require, exports, jsx_runtime_1, react_day_picker_1, utils_1, button_1, scroll_area_1, select_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NO_BORDER = void 0;
    exports.Calendar = Calendar;
    exports.NO_BORDER = "ring-0 focus:ring-0 focus-visible:ring-0 shadow-none focus:shadow-none focus-visible:shadow-none outline-none focus:outline-none focus-visible:outline-none border-none focus:border-none focus-visible:border-none";
    const CUSTOM_COMPONENTS = {
        PreviousMonthButton: ({ tabIndex, className, ...props }) => {
            return ((0, jsx_runtime_1.jsx)(react_day_picker_1.PreviousMonthButton, { tabIndex: 0, className: (0, utils_1.cn)(className, "focus:underline focus:underline-offset-2"), ...props }));
        },
        NextMonthButton: ({ tabIndex, className, ...props }) => {
            return ((0, jsx_runtime_1.jsx)(react_day_picker_1.NextMonthButton, { tabIndex: 0, className: (0, utils_1.cn)(className, "focus:underline focus:underline-offset-2"), ...props }));
        },
        Dropdown: ({ value, options, onChange, ...props }) => {
            const selected = options === null || options === void 0 ? void 0 : options.find((option) => option.value === value);
            const handleChange = (value) => {
                const changeEvent = {
                    target: { value },
                };
                onChange === null || onChange === void 0 ? void 0 : onChange(changeEvent);
            };
            return ((0, jsx_runtime_1.jsxs)(select_1.Select, { value: value === null || value === void 0 ? void 0 : value.toString(), onValueChange: (value) => {
                    handleChange(value);
                }, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { tabIndex: 0, className: (0, utils_1.cn)(exports.NO_BORDER, "focus:underline focus:underline-offset-2 pr-0 -mr-3 sm:-mr-2.5 h-7 [&>svg]:opacity-25 [&>svg]:-ml-0.5"), children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { children: selected === null || selected === void 0 ? void 0 : selected.label }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { position: "popper", children: (0, jsx_runtime_1.jsx)(scroll_area_1.ScrollArea, { className: "h-80", children: options === null || options === void 0 ? void 0 : options.map((option, id) => {
                                var _a, _b;
                                return ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: (_b = (_a = option.value) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "", children: option.label }, `${option.value}-${id}`));
                            }) }) })] }));
        },
    };
    // shadcn calendar is updated for react-day-picker v9 and mobile sizing
    function Calendar({ className, classNames, components, showOutsideDays = true, ...props }) {
        return ((0, jsx_runtime_1.jsx)(react_day_picker_1.DayPicker, { hideNavigation: false, showOutsideDays: showOutsideDays, className: className, classNames: {
                months: "flex gap-4 relative",
                month_caption: "flex -mx-3 mb-2 relative items-center text-sm font-medium",
                dropdowns: "flex",
                years_dropdown: "after:none",
                nav: "absolute right-0 z-50 -mr-1 sm:mr-0 flex items-center h-7",
                button_previous: (0, utils_1.cn)(exports.NO_BORDER, "group h-5 w-5 sm:h-6 sm:w-6"),
                button_next: (0, utils_1.cn)(exports.NO_BORDER, "group h-5 w-5 sm:h-6 sm:w-6"),
                chevron: "border-b border-transparent group-focus:border-current h-5 w-5 sm:h-6 sm:w-6",
                weeks: "w-full border-collapse space-y-1",
                week: "flex w-full mt-2",
                weekdays: "flex",
                weekday: "text-muted-foreground rounded-md w-6 sm:w-7 text-xs sm:text-sm font-normal text-[0.8rem]",
                day: (0, utils_1.cn)("relative p-0 focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].outside)]:bg-accent/50", props.mode === "range"
                    ? "[&.range-end]:rounded-r-md [&.range-start]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
                    : "rounded-md"),
                day_button: (0, utils_1.cn)((0, button_1.buttonVariants)({ variant: "ghost" }), "[&:hover]:bg-transparent [&:hover]:text-inherit", // Disable the ghost button hover
                "h-6 w-6 sm:h-7 sm:w-7 p-0 text-xs sm:text-sm text-center font-normal"),
                range_start: "range-start",
                range_end: "range-end",
                selected: "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
                today: "bg-accent text-accent-foreground",
                outside: "outside text-muted-foreground opacity-50  aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
                disabled: "text-muted-foreground opacity-50",
                range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
                hidden: "invisible",
                ...classNames,
            }, components: components
                ? {
                    ...CUSTOM_COMPONENTS,
                    ...components,
                }
                : CUSTOM_COMPONENTS, ...props }));
    }
    Calendar.displayName = "Calendar";
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItdjkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9jYWxlbmRhci12OS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtJQUFBLFlBQVksQ0FBQzs7OztJQXFLSiw0QkFBUTtJQTFJSixRQUFBLFNBQVMsR0FDcEIscU5BQXFOLENBQUM7SUFFeE4sTUFBTSxpQkFBaUIsR0FBRztRQUN4QixtQkFBbUIsRUFBRSxDQUFDLEVBQ3BCLFFBQVEsRUFDUixTQUFTLEVBQ1QsR0FBRyxLQUFLLEVBQ2lCLEVBQUUsRUFBRTtZQUM3QixPQUFPLENBQ0wsdUJBQUMsc0NBQW1CLElBQ2xCLFFBQVEsRUFBRSxDQUFDLEVBQ1gsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLFNBQVMsRUFBRSwwQ0FBMEMsQ0FBQyxLQUNoRSxLQUFLLEdBQ1QsQ0FDSCxDQUFDO1FBQ0osQ0FBQztRQUNELGVBQWUsRUFBRSxDQUFDLEVBQ2hCLFFBQVEsRUFDUixTQUFTLEVBQ1QsR0FBRyxLQUFLLEVBQ2EsRUFBRSxFQUFFO1lBQ3pCLE9BQU8sQ0FDTCx1QkFBQyxrQ0FBZSxJQUNkLFFBQVEsRUFBRSxDQUFDLEVBQ1gsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLFNBQVMsRUFBRSwwQ0FBMEMsQ0FBQyxLQUNoRSxLQUFLLEdBQ1QsQ0FDSCxDQUFDO1FBQ0osQ0FBQztRQUNELFFBQVEsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxLQUFLLEVBQWlCLEVBQUUsRUFBRTtZQUNsRSxNQUFNLFFBQVEsR0FBRyxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDO1lBQ25FLE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUU7Z0JBQ3JDLE1BQU0s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RUFBRSxXQUFXO2dCQUNuQixHQUFHLFVBQVU7YUFDZCxFQUNELFVBQVUsRUFDUixVQUFVO2dCQUNSLENBQUMsQ0FBQztvQkFDRSxHQUFHLGlCQUFpQjtvQkFDcEIsR0FBRyxVQUFVO2lCQUNkO2dCQUNILENBQUMsQ0FBQyxpQkFBaUIsS0FFbkIsS0FBSyxHQUNULENBQ0gsQ0FBQztJQUNKLENBQUM7SUFDRCxRQUFRLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7XG4gIFByZXZpb3VzTW9udGhCdXR0b24sXG4gIFByZXZpb3VzTW9udGhCdXR0b25Qcm9wcyxcbiAgTmV4dE1vbnRoQnV0dG9uLFxuICBOZXh0TW9udGhCdXR0b25Qcm9wcyxcbiAgRGF0ZVJhbmdlIGFzIElubmVyRGF0ZVJhbmdlLFxuICBEYXlQaWNrZXIsXG4gIERyb3Bkb3duUHJvcHMsXG59IGZyb20gXCJyZWFjdC1kYXktcGlja2VyXCI7XG5cbmltcG9ydCB7IGNuIH0gZnJvbSBcIi4uLy4uL2xpYi91dGlsc1wiO1xuaW1wb3J0IHsgYnV0dG9uVmFyaWFudHMgfSBmcm9tIFwiLi9idXR0b25cIjtcbmltcG9ydCB7IFNjcm9sbEFyZWEgfSBmcm9tIFwiLi9zY3JvbGwtYXJlYVwiO1xuaW1wb3J0IHtcbiAgU2VsZWN0LFxuICBTZWxlY3RDb250ZW50LFxuICBTZWxlY3RJdGVtLFxuICBTZWxlY3RUcmlnZ2VyLFxuICBTZWxlY3RWYWx1ZSxcbn0gZnJvbSBcIi4vc2VsZWN0XCI7XG5cbmV4cG9ydCB0eXBlIERhdGVSYW5nZSA9IElubmVyRGF0ZVJhbmdlO1xuZXhwb3J0IHR5cGUgQ2FsZW5kYXJQcm9wcyA9IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBEYXlQaWNrZXI+O1xuXG5leHBvcnQgY29uc3QgTk9fQk9SREVSID1cbiAgXCJyaW5nLTAgZm9jdXM6cmluZy0wIGZvY3VzLXZpc2libGU6cmluZy0wIHNoYWRvdy1ub25lIGZvY3VzOnNoYWRvdy1ub25lIGZvY3VzLXZpc2libGU6c2hhZG93LW5vbmUgb3V0bGluZS1ub25lIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOm91dGxpbmUtbm9uZSBib3JkZXItbm9uZSBmb2N1czpib3JkZXItbm9uZSBmb2N1cy12aXNpYmxlOmJvcmRlci1ub25lXCI7XG5cbmNvbnN0IENVU1RPTV9DT01QT05FTlRTID0ge1xuICBQcmV2aW91c01vbnRoQnV0dG9uOiAoe1xuICAgIHRhYkluZGV4LFxuICAgIGNsYXNzTmFtZSxcbiAgICAuLi5wcm9wc1xuICB9OiBQcmV2aW91c01vbnRoQnV0dG9uUHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFByZXZpb3VzTW9udGhCdXR0b25cbiAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICAgIGNsYXNzTmFtZT17Y24oY2xhc3NOYW1lLCBcImZvY3VzOnVuZGVybGluZSBmb2N1czp1bmRlcmxpbmUtb2Zmc2V0LTJcIil9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgIC8+XG4gICAgKTtcbiAgfSxcbiAgTmV4dE1vbnRoQnV0dG9uOiAoe1xuICAgIHRhYkluZGV4LFxuICAgIGNsYXNzTmFtZSxcbiAgICAuLi5wcm9wc1xuICB9OiBOZXh0TW9udGhCdXR0b25Qcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8TmV4dE1vbnRoQnV0dG9uXG4gICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICBjbGFzc05hbWU9e2NuKGNsYXNzTmFtZSwgXCJmb2N1czp1bmRlcmxpbmUgZm9jdXM6dW5kZXJsaW5lLW9mZnNldC0yXCIpfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAvPlxuICAgICk7XG4gIH0sXG4gIERyb3Bkb3duOiAoeyB2YWx1ZSwgb3B0aW9ucywgb25DaGFuZ2UsIC4uLnByb3BzIH06IERyb3Bkb3duUHJvcHMpID0+IHtcbiAgICBjb25zdCBzZWxlY3RlZCA9IG9wdGlvbnM/LmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uLnZhbHVlID09PSB2YWx1ZSk7XG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IGNoYW5nZUV2ZW50ID0ge1xuICAgICAgICB0YXJnZXQ6IHsgdmFsdWUgfSxcbiAgICAgIH0gYXMgUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+O1xuICAgICAgb25DaGFuZ2U/LihjaGFuZ2VFdmVudCk7XG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgPFNlbGVjdFxuICAgICAgICB2YWx1ZT17dmFsdWU/LnRvU3RyaW5nKCl9XG4gICAgICAgIG9uVmFsdWVDaGFuZ2U9eyh2YWx1ZSkgPT4ge1xuICAgICAgICAgIGhhbmRsZUNoYW5nZSh2YWx1ZSk7XG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxTZWxlY3RUcmlnZ2VyXG4gICAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgICAgIE5PX0JPUkRFUixcbiAgICAgICAgICAgIFwiZm9jdXM6dW5kZXJsaW5lIGZvY3VzOnVuZGVybGluZS1vZmZzZXQtMiBwci0wIC1tci0zIHNtOi1tci0yLjUgaC03IFsmPnN2Z106b3BhY2l0eS0yNSBbJj5zdmddOi1tbC0wLjVcIixcbiAgICAgICAgICApfVxuICAgICAgICA+XG4gICAgICAgICAgPFNlbGVjdFZhbHVlPntzZWxlY3RlZD8ubGFiZWx9PC9TZWxlY3RWYWx1ZT5cbiAgICAgICAgPC9TZWxlY3RUcmlnZ2VyPlxuICAgICAgICA8U2VsZWN0Q29udGVudCBwb3NpdGlvbj1cInBvcHBlclwiPlxuICAgICAgICAgIDxTY3JvbGxBcmVhIGNsYXNzTmFtZT1cImgtODBcIj5cbiAgICAgICAgICAgIHtvcHRpb25zPy5tYXAoKG9wdGlvbiwgaWQ6IG51bWJlcikgPT4gKFxuICAgICAgICAgICAgICA8U2VsZWN0SXRlbVxuICAgICAgICAgICAgICAgIGtleT17YCR7b3B0aW9uLnZhbHVlfS0ke2lkfWB9XG4gICAgICAgICAgICAgICAgdmFsdWU9e29wdGlvbi52YWx1ZT8udG9TdHJpbmcoKSA/PyBcIlwifVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge29wdGlvbi5sYWJlbH1cbiAgICAgICAgICAgICAgPC9TZWxlY3RJdGVtPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9TY3JvbGxBcmVhPlxuICAgICAgICA8L1NlbGVjdENvbnRlbnQ+XG4gICAgICA8L1NlbGVjdD5cbiAgICApO1xuICB9LFxufTtcblxuLy8gc2hhZGNuIGNhbGVuZGFyIGlzIHVwZGF0ZWQgZm9yIHJlYWN0LWRheS1waWNrZXIgdjkgYW5kIG1vYmlsZSBzaXppbmdcbmZ1bmN0aW9uIENhbGVuZGFyKHtcbiAgY2xhc3NOYW1lLFxuICBjbGFzc05hbWVzLFxuICBjb21wb25lbnRzLFxuICBzaG93T3V0c2lkZURheXMgPSB0cnVlLFxuICAuLi5wcm9wc1xufTogQ2FsZW5kYXJQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxEYXlQaWNrZXJcbiAgICAgIGhpZGVOYXZpZ2F0aW9uPXtmYWxzZX1cbiAgICAgIHNob3dPdXRzaWRlRGF5cz17c2hvd091dHNpZGVEYXlzfVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICBjbGFzc05hbWVzPXt7XG4gICAgICAgIG1vbnRoczogXCJmbGV4IGdhcC00IHJlbGF0aXZlXCIsXG4gICAgICAgIG1vbnRoX2NhcHRpb246XG4gICAgICAgICAgXCJmbGV4IC1teC0zIG1iLTIgcmVsYXRpdmUgaXRlbXMtY2VudGVyIHRleHQtc20gZm9udC1tZWRpdW1cIixcbiAgICAgICAgZHJvcGRvd25zOiBcImZsZXhcIixcbiAgICAgICAgeWVhcnNfZHJvcGRvd246IFwiYWZ0ZXI6bm9uZVwiLFxuICAgICAgICBuYXY6IFwiYWJzb2x1dGUgcmlnaHQtMCB6LTUwIC1tci0xIHNtOm1yLTAgZmxleCBpdGVtcy1jZW50ZXIgaC03XCIsXG4gICAgICAgIGJ1dHRvbl9wcmV2aW91czogY24oTk9fQk9SREVSLCBcImdyb3VwIGgtNSB3LTUgc206aC02IHNtOnctNlwiKSxcbiAgICAgICAgYnV0dG9uX25leHQ6IGNuKE5PX0JPUkRFUiwgXCJncm91cCBoLTUgdy01IHNtOmgtNiBzbTp3LTZcIiksXG4gICAgICAgIGNoZXZyb246XG4gICAgICAgICAgXCJib3JkZXItYiBib3JkZXItdHJhbnNwYXJlbnQgZ3JvdXAtZm9jdXM6Ym9yZGVyLWN1cnJlbnQgaC01IHctNSBzbTpoLTYgc206dy02XCIsXG4gICAgICAgIHdlZWtzOiBcInctZnVsbCBib3JkZXItY29sbGFwc2Ugc3BhY2UteS0xXCIsXG4gICAgICAgIHdlZWs6IFwiZmxleCB3LWZ1bGwgbXQtMlwiLFxuICAgICAgICB3ZWVrZGF5czogXCJmbGV4XCIsXG4gICAgICAgIHdlZWtkYXk6XG4gICAgICAgICAgXCJ0ZXh0LW11dGVkLWZvcmVncm91bmQgcm91bmRlZC1tZCB3LTYgc206dy03IHRleHQteHMgc206dGV4dC1zbSBmb250LW5vcm1hbCB0ZXh0LVswLjhyZW1dXCIsXG4gICAgICAgIGRheTogY24oXG4gICAgICAgICAgXCJyZWxhdGl2ZSBwLTAgZm9jdXMtd2l0aGluOnJlbGF0aXZlIGZvY3VzLXdpdGhpbjp6LTIwIFsmOmhhcyhbYXJpYS1zZWxlY3RlZF0pXTpiZy1hY2NlbnQgWyY6aGFzKFthcmlhLXNlbGVjdGVkXS5vdXRzaWRlKV06YmctYWNjZW50LzUwXCIsXG4gICAgICAgICAgcHJvcHMubW9kZSA9PT0gXCJyYW5nZVwiXG4gICAgICAgICAgICA/IFwiWyYucmFuZ2UtZW5kXTpyb3VuZGVkLXItbWQgWyYucmFuZ2Utc3RhcnRdOnJvdW5kZWQtbC1tZCBmaXJzdDpbJjpoYXMoW2FyaWEtc2VsZWN0ZWRdKV06cm91bmRlZC1sLW1kIGxhc3Q6WyY6aGFzKFthcmlhLXNlbGVjdGVkXSldOnJvdW5kZWQtci1tZFwiXG4gICAgICAgICAgICA6IFwicm91bmRlZC1tZFwiLFxuICAgICAgICApLFxuICAgICAgICBkYXlfYnV0dG9uOiBjbihcbiAgICAgICAgICBidXR0b25WYXJpYW50cyh7IHZhcmlhbnQ6IFwiZ2hvc3RcIiB9KSxcbiAgICAgICAgICBcIlsmOmhvdmVyXTpiZy10cmFuc3BhcmVudCBbJjpob3Zlcl06dGV4dC1pbmhlcml0XCIsIC8vIERpc2FibGUgdGhlIGdob3N0IGJ1dHRvbiBob3ZlclxuICAgICAgICAgIFwiaC02IHctNiBzbTpoLTcgc206dy03IHAtMCB0ZXh0LXhzIHNtOnRleHQtc20gdGV4dC1jZW50ZXIgZm9udC1ub3JtYWxcIixcbiAgICAgICAgKSxcbiAgICAgICAgcmFuZ2Vfc3RhcnQ6IFwicmFuZ2Utc3RhcnRcIixcbiAgICAgICAgcmFuZ2VfZW5kOiBcInJhbmdlLWVuZFwiLFxuICAgICAgICBzZWxlY3RlZDpcbiAgICAgICAgICBcImJnLXByaW1hcnkgdGV4dC1wcmltYXJ5LWZvcmVncm91bmQgaG92ZXI6YmctcHJpbWFyeSBob3Zlcjp0ZXh0LXByaW1hcnktZm9yZWdyb3VuZCBmb2N1czpiZy1wcmltYXJ5IGZvY3VzOnRleHQtcHJpbWFyeS1mb3JlZ3JvdW5kXCIsXG4gICAgICAgIHRvZGF5OiBcImJnLWFjY2VudCB0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kXCIsXG4gICAgICAgIG91dHNpZGU6XG4gICAgICAgICAgXCJvdXRzaWRlIHRleHQtbXV0ZWQtZm9yZWdyb3VuZCBvcGFjaXR5LTUwICBhcmlhLXNlbGVjdGVkOmJnLWFjY2VudC81MCBhcmlhLXNlbGVjdGVkOnRleHQtbXV0ZWQtZm9yZWdyb3VuZCBhcmlhLXNlbGVjdGVkOm9wYWNpdHktMzBcIixcbiAgICAgICAgZGlzYWJsZWQ6IFwidGV4dC1tdXRlZC1mb3JlZ3JvdW5kIG9wYWNpdHktNTBcIixcbiAgICAgICAgcmFuZ2VfbWlkZGxlOlxuICAgICAgICAgIFwiYXJpYS1zZWxlY3RlZDpiZy1hY2NlbnQgYXJpYS1zZWxlY3RlZDp0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kXCIsXG4gICAgICAgIGhpZGRlbjogXCJpbnZpc2libGVcIixcbiAgICAgICAgLi4uY2xhc3NOYW1lcyxcbiAgICAgIH19XG4gICAgICBjb21wb25lbnRzPXtcbiAgICAgICAgY29tcG9uZW50c1xuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAuLi5DVVNUT01fQ09NUE9ORU5UUyxcbiAgICAgICAgICAgICAgLi4uY29tcG9uZW50cyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IENVU1RPTV9DT01QT05FTlRTXG4gICAgICB9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKTtcbn1cbkNhbGVuZGFyLmRpc3BsYXlOYW1lID0gXCJDYWxlbmRhclwiO1xuXG5leHBvcnQgeyBDYWxlbmRhciB9O1xuIl19