define(["require", "exports", "react/jsx-runtime", "react", "lucide-react", "react-day-picker", "../../lib/utils", "./button", "./scroll-area", "./select"], function (require, exports, jsx_runtime_1, React, lucide_react_1, react_day_picker_1, utils_1, button_1, scroll_area_1, select_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NO_BORDER = exports.FOCUS = void 0;
    exports.Calendar = Calendar;
    exports.FOCUS = "focus:underline focus:underline-offset-2";
    exports.NO_BORDER = "ring-0 focus:ring-0 focus-visible:ring-0 shadow-none focus:shadow-none focus-visible:shadow-none outline-none focus:outline-none focus-visible:outline-none border-none focus:border-none focus-visible:border-none";
    const CHEVRONS = {
        up: lucide_react_1.ChevronUpIcon,
        down: lucide_react_1.ChevronDownIcon,
        left: lucide_react_1.ChevronLeftIcon,
        right: lucide_react_1.ChevronRightIcon,
    };
    // Updated for react-day-picker v9 and mobile sizing
    function Calendar({ numberOfMonths = 1, showOutsideDays = true, compact = false, captionLayout = "dropdown", className = "w-fit", classNames, ...props }) {
        // Custom components for prev/next and date dropdowns
        const components = React.useMemo(() => {
            const customComponents = {
                PreviousMonthButton: ({ tabIndex, className, ...props }) => ((0, jsx_runtime_1.jsx)(react_day_picker_1.PreviousMonthButton, { tabIndex: 0, className: (0, utils_1.cn)(exports.FOCUS, className), ...props })),
                NextMonthButton: ({ tabIndex, className, ...props }) => ((0, jsx_runtime_1.jsx)(react_day_picker_1.NextMonthButton, { tabIndex: 0, className: (0, utils_1.cn)(exports.FOCUS, className), ...props })),
                Chevron: ({ className, orientation, disabled = false }) => {
                    const ChevronIcon = CHEVRONS[orientation];
                    return ((0, jsx_runtime_1.jsxs)("div", { children: ["\u00A0\u00A0", (0, jsx_runtime_1.jsx)(ChevronIcon, { className: (0, utils_1.cn)(compact ? "absolute top-1 sm:top-[3px]" : "absolute top-[1px]", className), opacity: disabled ? 0.5 : 1 })] }));
                },
                Dropdown: ({ value, options, onChange }) => {
                    const selected = options === null || options === void 0 ? void 0 : options.find((option) => option.value === value);
                    const handleChange = (value) => onChange === null || onChange === void 0 ? void 0 : onChange({ target: { value } });
                    return ((0, jsx_runtime_1.jsxs)(select_1.Select, { value: value === null || value === void 0 ? void 0 : value.toString(), onValueChange: handleChange, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { tabIndex: 0, className: (0, utils_1.cn)(exports.FOCUS, exports.NO_BORDER, compact ? "[&>svg]:-ml-[1px]" : "text-md", "h-7 -mr-2.5 pr-0 [&>svg]:opacity-25"), children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { children: selected === null || selected === void 0 ? void 0 : selected.label }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { position: "popper", children: (0, jsx_runtime_1.jsx)(scroll_area_1.ScrollArea, { className: "h-56", children: options === null || options === void 0 ? void 0 : options.map(({ value: v, label }, i) => {
                                        var _a;
                                        return ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: (_a = v === null || v === void 0 ? void 0 : v.toString()) !== null && _a !== void 0 ? _a : "", children: label }, `${v}-${i}`));
                                    }) }) })] }));
                },
            };
            return props.components
                ? {
                    ...customComponents,
                    ...props.components,
                }
                : customComponents;
        }, [compact, props.components]);
        const btnSize = compact ? "h-5 w-4 sm:w-5 text-sm" : "h-6 w-6 text-md";
        const isLabel = captionLayout === "label";
        return ((0, jsx_runtime_1.jsx)(react_day_picker_1.DayPicker, { mode: props.mode || "single", captionLayout: captionLayout, numberOfMonths: numberOfMonths, showOutsideDays: showOutsideDays, components: components, className: (0, utils_1.cn)("p-3", className), classNames: {
                months: "flex gap-4 relative",
                month_grid: compact ? undefined : isLabel ? "mt-2.5" : "mt-2",
                month_caption: (0, utils_1.cn)("flex relative items-center font-medium", compact ? "text-sm mt-1 ml-1 sm:ml-[5.5px]" : "text-md mt-0.5 ml-1.5", isLabel ? "mb-2" : "-ml-2 sm:-ml-2 mb-1 mt-0"),
                dropdowns: compact ? "flex sm:ml-0.5" : "flex ml-0.5",
                years_dropdown: "after:none",
                nav: "absolute right-0 z-50 flex items-center h-7",
                button_previous: (0, utils_1.cn)(exports.NO_BORDER, btnSize),
                button_next: (0, utils_1.cn)(exports.NO_BORDER, btnSize),
                chevron: btnSize,
                weeks: "w-full border-collapse space-y-1",
                week: "flex w-full mt-2",
                weekdays: "flex",
                weekday: (0, utils_1.cn)("text-muted-foreground rounded-md font-normal", compact ? "w-6 sm:w-7 text-xs sm:text-sm" : "w-8 text-sm"),
                day: (0, utils_1.cn)("relative p-0 focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].outside)]:bg-accent/50", props.mode === "range"
                    ? "[&.range-end]:rounded-r-md [&.range-start]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
                    : "rounded-md"),
                day_button: (0, utils_1.cn)((0, button_1.buttonVariants)({ variant: "ghost" }), "[&:hover]:bg-transparent [&:hover]:text-inherit", // Disable the ghost button hover
                compact
                    ? "h-6 w-6 sm:h-7 sm:w-7 p-0 text-xs sm:text-sm"
                    : "h-8 w-8 p-0.5 text-sm", "text-center font-normal"),
                range_start: "range-start",
                range_end: "range-end",
                selected: "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
                today: "bg-accent text-accent-foreground",
                outside: "outside text-muted-foreground opacity-50  aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
                disabled: "text-muted-foreground opacity-50",
                range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
                hidden: "invisible",
                ...classNames,
            }, ...props }));
    }
    Calendar.displayName = "Calendar";
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItdjkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9jYWxlbmRhci12OS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtJQUFBLFlBQVksQ0FBQzs7OztJQTRMSiw0QkFBUTtJQXZKSixRQUFBLEtBQUssR0FBRywwQ0FBMEMsQ0FBQztJQUNuRCxRQUFBLFNBQVMsR0FDcEIscU5BQXFOLENBQUM7SUFFeE4sTUFBTSxRQUFRLEdBR1Y7UUFDRixFQUFFLEVBQUUsNEJBQWE7UUFDakIsSUFBSSxFQUFFLDhCQUFlO1FBQ3JCLElBQUksRUFBRSw4QkFBZTtRQUNyQixLQUFLLEVBQUUsK0JBQWdCO0tBQ3hCLENBQUM7SUFFRixvREFBb0Q7SUFDcEQsU0FBUyxRQUFRLENBQUMsRUFDaEIsY0FBYyxHQUFHLENBQUMsRUFDbEIsZUFBZSxHQUFHLElBQUksRUFDdEIsT0FBTyxHQUFHLEtBQUssRUFDZixhQUFhLEdBQUcsVUFBVSxFQUMxQixTQUFTLEdBQUcsT0FBTyxFQUNuQixVQUFVLEVBQ1YsR0FBRyxLQUFLLEVBQ007UUFDZCxxREFBcUQ7UUFDckQsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7WUFDcEMsTUFBTSxnQkFBZ0IsR0FBRztnQkFDdkIsbUJBQW1CLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLEVBQVcsRUFBRSxFQUFFLENBQUMsQ0FDbkUsdUJBQUMsc0NBQU8sSUFBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFBQyxhQUFLLEVBQUUsU0FBUyxDQUFDLEtBQU0sS0FBSyxHQUFJLENBQ3JFO2dCQUNELGVBQWUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssRUFBVyxFQUFFLEVBQUUsQ0FBQyxDQUMvRCx1QkFBQyxrQ0FBTyxJQUFDLFFBQVEs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SUFBdUksRUFDdkksS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPO29CQUNwQixDQUFDLENBQUMsZ0pBQWdKO29CQUNsSixDQUFDLENBQUMsWUFBWSxDQUNqQjtnQkFDRCxVQUFVLEVBQUUsSUFBQSxVQUFFLEVBQ1osSUFBQSx1QkFBYyxFQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQ3BDLGlEQUFpRCxFQUFFLGlDQUFpQztnQkFDcEYsT0FBTztvQkFDTCxDQUFDLENBQUMsOENBQThDO29CQUNoRCxDQUFDLENBQUMsdUJBQXVCLEVBQzNCLHlCQUF5QixDQUMxQjtnQkFDRCxXQUFXLEVBQUUsYUFBYTtnQkFDMUIsU0FBUyxFQUFFLFdBQVc7Z0JBQ3RCLFFBQVEsRUFDTixrSUFBa0k7Z0JBQ3BJLEtBQUssRUFBRSxrQ0FBa0M7Z0JBQ3pDLE9BQU8sRUFDTCxtSUFBbUk7Z0JBQ3JJLFFBQVEsRUFBRSxrQ0FBa0M7Z0JBQzVDLFlBQVksRUFDViw4REFBOEQ7Z0JBQ2hFLE1BQU0sRUFBRSxXQUFXO2dCQUNuQixHQUFHLFVBQVU7YUFDZCxLQUNHLEtBQUssR0FDVCxDQUNILENBQUM7SUFDSixDQUFDO0lBQ0QsUUFBUSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge1xuICBDaGV2cm9uRG93bkljb24sXG4gIENoZXZyb25MZWZ0SWNvbixcbiAgQ2hldnJvblJpZ2h0SWNvbixcbiAgQ2hldnJvblVwSWNvbixcbiAgTHVjaWRlUHJvcHMsXG59IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcbmltcG9ydCB7XG4gIERheVBpY2tlcixcbiAgQ2hldnJvblByb3BzLFxuICBEcm9wZG93blByb3BzLFxuICBQcmV2aW91c01vbnRoQnV0dG9uIGFzIEJ0blByZXYsXG4gIFByZXZpb3VzTW9udGhCdXR0b25Qcm9wcyBhcyBQcnBQcmV2LFxuICBOZXh0TW9udGhCdXR0b24gYXMgQnRuTmV4dCxcbiAgTmV4dE1vbnRoQnV0dG9uUHJvcHMgYXMgUHJwTmV4dCxcbiAgRGF0ZVJhbmdlIGFzIElubmVyRGF0ZVJhbmdlLFxufSBmcm9tIFwicmVhY3QtZGF5LXBpY2tlclwiO1xuXG5pbXBvcnQgeyBjbiB9IGZyb20gXCIuLi8uLi9saWIvdXRpbHNcIjtcbmltcG9ydCB7IGJ1dHRvblZhcmlhbnRzIH0gZnJvbSBcIi4vYnV0dG9uXCI7XG5pbXBvcnQgeyBTY3JvbGxBcmVhIH0gZnJvbSBcIi4vc2Nyb2xsLWFyZWFcIjtcbmltcG9ydCB7XG4gIFNlbGVjdCxcbiAgU2VsZWN0Q29udGVudCxcbiAgU2VsZWN0SXRlbSxcbiAgU2VsZWN0VHJpZ2dlcixcbiAgU2VsZWN0VmFsdWUsXG59IGZyb20gXCIuL3NlbGVjdFwiO1xuXG5leHBvcnQgdHlwZSBEYXRlUmFuZ2UgPSBJbm5lckRhdGVSYW5nZTtcbmV4cG9ydCB0eXBlIENhbGVuZGFyUHJvcHMgPSBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgRGF5UGlja2VyPiAmIHtcbiAgY29tcGFjdD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgRk9DVVMgPSBcImZvY3VzOnVuZGVybGluZSBmb2N1czp1bmRlcmxpbmUtb2Zmc2V0LTJcIjtcbmV4cG9ydCBjb25zdCBOT19CT1JERVIgPVxuICBcInJpbmctMCBmb2N1czpyaW5nLTAgZm9jdXMtdmlzaWJsZTpyaW5nLTAgc2hhZG93LW5vbmUgZm9jdXM6c2hhZG93LW5vbmUgZm9jdXMtdmlzaWJsZTpzaGFkb3ctbm9uZSBvdXRsaW5lLW5vbmUgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGJvcmRlci1ub25lIGZvY3VzOmJvcmRlci1ub25lIGZvY3VzLXZpc2libGU6Ym9yZGVyLW5vbmVcIjtcblxuY29uc3QgQ0hFVlJPTlM6IFJlY29yZDxcbiAgQ2hldnJvblByb3BzW1wib3JpZW50YXRpb25cIl0sXG4gIFJlYWN0LkZvcndhcmRSZWZFeG90aWNDb21wb25lbnQ8T21pdDxMdWNpZGVQcm9wcywgXCJyZWZcIj4+XG4+ID0ge1xuICB1cDogQ2hldnJvblVwSWNvbixcbiAgZG93bjogQ2hldnJvbkRvd25JY29uLFxuICBsZWZ0OiBDaGV2cm9uTGVmdEljb24sXG4gIHJpZ2h0OiBDaGV2cm9uUmlnaHRJY29uLFxufTtcblxuLy8gVXBkYXRlZCBmb3IgcmVhY3QtZGF5LXBpY2tlciB2OSBhbmQgbW9iaWxlIHNpemluZ1xuZnVuY3Rpb24gQ2FsZW5kYXIoe1xuICBudW1iZXJPZk1vbnRocyA9IDEsXG4gIHNob3dPdXRzaWRlRGF5cyA9IHRydWUsXG4gIGNvbXBhY3QgPSBmYWxzZSxcbiAgY2FwdGlvbkxheW91dCA9IFwiZHJvcGRvd25cIixcbiAgY2xhc3NOYW1lID0gXCJ3LWZpdFwiLFxuICBjbGFzc05hbWVzLFxuICAuLi5wcm9wc1xufTogQ2FsZW5kYXJQcm9wcykge1xuICAvLyBDdXN0b20gY29tcG9uZW50cyBmb3IgcHJldi9uZXh0IGFuZCBkYXRlIGRyb3Bkb3duc1xuICBjb25zdCBjb21wb25lbnRzID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgY3VzdG9tQ29tcG9uZW50cyA9IHtcbiAgICAgIFByZXZpb3VzTW9udGhCdXR0b246ICh7IHRhYkluZGV4LCBjbGFzc05hbWUsIC4uLnByb3BzIH06IFBycFByZXYpID0+IChcbiAgICAgICAgPEJ0blByZXYgdGFiSW5kZXg9ezB9IGNsYXNzTmFtZT17Y24oRk9DVVMsIGNsYXNzTmFtZSl9IHsuLi5wcm9wc30gLz5cbiAgICAgICksXG4gICAgICBOZXh0TW9udGhCdXR0b246ICh7IHRhYkluZGV4LCBjbGFzc05hbWUsIC4uLnByb3BzIH06IFBycE5leHQpID0+IChcbiAgICAgICAgPEJ0bk5leHQgdGFiSW5kZXg9ezB9IGNsYXNzTmFtZT17Y24oRk9DVVMsIGNsYXNzTmFtZSl9IHsuLi5wcm9wc30gLz5cbiAgICAgICksXG4gICAgICBDaGV2cm9uOiAoeyBjbGFzc05hbWUsIG9yaWVudGF0aW9uLCBkaXNhYmxlZCA9IGZhbHNlIH06IENoZXZyb25Qcm9wcykgPT4ge1xuICAgICAgICBjb25zdCBDaGV2cm9uSWNvbiA9IENIRVZST05TW29yaWVudGF0aW9uXTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgJm5ic3A7Jm5ic3A7XG4gICAgICAgICAgICA8Q2hldnJvbkljb25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgICAgICAgICBjb21wYWN0ID8gXCJhYnNvbHV0ZSB0b3AtMSBzbTp0b3AtWzNweF1cIiA6IFwiYWJzb2x1dGUgdG9wLVsxcHhdXCIsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICBvcGFjaXR5PXtkaXNhYmxlZCA/IDAuNSA6IDF9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIERyb3Bkb3duOiAoeyB2YWx1ZSwgb3B0aW9ucywgb25DaGFuZ2UgfTogRHJvcGRvd25Qcm9wcykgPT4ge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IG9wdGlvbnM/LmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uLnZhbHVlID09PSB2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGhhbmRsZUNoYW5nZSA9ICh2YWx1ZTogc3RyaW5nKSA9PlxuICAgICAgICAgIG9uQ2hhbmdlPy4oeyB0YXJnZXQ6IHsgdmFsdWUgfSB9IGFzIGFueSk7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFNlbGVjdCB2YWx1ZT17dmFsdWU/LnRvU3RyaW5nKCl9IG9uVmFsdWVDaGFuZ2U9e2hhbmRsZUNoYW5nZX0+XG4gICAgICAgICAgICA8U2VsZWN0VHJpZ2dlclxuICAgICAgICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgICAgICAgICBGT0NVUyxcbiAgICAgICAgICAgICAgICBOT19CT1JERVIsXG4gICAgICAgICAgICAgICAgY29tcGFjdCA/IFwiWyY+c3ZnXTotbWwtWzFweF1cIiA6IFwidGV4dC1tZFwiLFxuICAgICAgICAgICAgICAgIFwiaC03IC1tci0yLjUgcHItMCBbJj5zdmddOm9wYWNpdHktMjVcIixcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFNlbGVjdFZhbHVlPntzZWxlY3RlZD8ubGFiZWx9PC9TZWxlY3RWYWx1ZT5cbiAgICAgICAgICAgIDwvU2VsZWN0VHJpZ2dlcj5cbiAgICAgICAgICAgIDxTZWxlY3RDb250ZW50IHBvc2l0aW9uPVwicG9wcGVyXCI+XG4gICAgICAgICAgICAgIDxTY3JvbGxBcmVhIGNsYXNzTmFtZT1cImgtNTZcIj5cbiAgICAgICAgICAgICAgICB7b3B0aW9ucz8ubWFwKCh7IHZhbHVlOiB2LCBsYWJlbCB9LCBpOiBudW1iZXIpID0+IChcbiAgICAgICAgICAgICAgICAgIDxTZWxlY3RJdGVtIGtleT17YCR7dn0tJHtpfWB9IHZhbHVlPXt2Py50b1N0cmluZygpID8/IFwiXCJ9PlxuICAgICAgICAgICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdEl0ZW0+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIDwvU2Nyb2xsQXJlYT5cbiAgICAgICAgICAgIDwvU2VsZWN0Q29udGVudD5cbiAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gcHJvcHMuY29tcG9uZW50c1xuICAgICAgPyB7XG4gICAgICAgICAgLi4uY3VzdG9tQ29tcG9uZW50cyxcbiAgICAgICAgICAuLi5wcm9wcy5jb21wb25lbnRzLFxuICAgICAgICB9XG4gICAgICA6IGN1c3RvbUNvbXBvbmVudHM7XG4gIH0sIFtjb21wYWN0LCBwcm9wcy5jb21wb25lbnRzXSk7XG5cbiAgY29uc3QgYnRuU2l6ZSA9IGNvbXBhY3QgPyBcImgtNSB3LTQgc206dy01IHRleHQtc21cIiA6IFwiaC02IHctNiB0ZXh0LW1kXCI7XG4gIGNvbnN0IGlzTGFiZWwgPSBjYXB0aW9uTGF5b3V0ID09PSBcImxhYmVsXCI7XG5cbiAgcmV0dXJuIChcbiAgICA8RGF5UGlja2VyXG4gICAgICBtb2RlPXtwcm9wcy5tb2RlIHx8IFwic2luZ2xlXCJ9XG4gICAgICBjYXB0aW9uTGF5b3V0PXtjYXB0aW9uTGF5b3V0fVxuICAgICAgbnVtYmVyT2ZNb250aHM9e251bWJlck9mTW9udGhzfVxuICAgICAgc2hvd091dHNpZGVEYXlzPXtzaG93T3V0c2lkZURheXN9XG4gICAgICBjb21wb25lbnRzPXtjb21wb25lbnRzfVxuICAgICAgY2xhc3NOYW1lPXtjbihcInAtM1wiLCBjbGFzc05hbWUpfVxuICAgICAgY2xhc3NOYW1lcz17e1xuICAgICAgICBtb250aHM6IFwiZmxleCBnYXAtNCByZWxhdGl2ZVwiLFxuICAgICAgICBtb250aF9ncmlkOiBjb21wYWN0ID8gdW5kZWZpbmVkIDogaXNMYWJlbCA/IFwibXQtMi41XCIgOiBcIm10LTJcIixcbiAgICAgICAgbW9udGhfY2FwdGlvbjogY24oXG4gICAgICAgICAgXCJmbGV4IHJlbGF0aXZlIGl0ZW1zLWNlbnRlciBmb250LW1lZGl1bVwiLFxuICAgICAgICAgIGNvbXBhY3QgPyBcInRleHQtc20gbXQtMSBtbC0xIHNtOm1sLVs1LjVweF1cIiA6IFwidGV4dC1tZCBtdC0wLjUgbWwtMS41XCIsXG4gICAgICAgICAgaXNMYWJlbCA/IFwibWItMlwiIDogXCItbWwtMiBzbTotbWwtMiBtYi0xIG10LTBcIixcbiAgICAgICAgKSxcbiAgICAgICAgZHJvcGRvd25zOiBjb21wYWN0ID8gXCJmbGV4IHNtOm1sLTAuNVwiIDogXCJmbGV4IG1sLTAuNVwiLFxuICAgICAgICB5ZWFyc19kcm9wZG93bjogXCJhZnRlcjpub25lXCIsXG4gICAgICAgIG5hdjogXCJhYnNvbHV0ZSByaWdodC0wIHotNTAgZmxleCBpdGVtcy1jZW50ZXIgaC03XCIsXG4gICAgICAgIGJ1dHRvbl9wcmV2aW91czogY24oTk9fQk9SREVSLCBidG5TaXplKSxcbiAgICAgICAgYnV0dG9uX25leHQ6IGNuKE5PX0JPUkRFUiwgYnRuU2l6ZSksXG4gICAgICAgIGNoZXZyb246IGJ0blNpemUsXG4gICAgICAgIHdlZWtzOiBcInctZnVsbCBib3JkZXItY29sbGFwc2Ugc3BhY2UteS0xXCIsXG4gICAgICAgIHdlZWs6IFwiZmxleCB3LWZ1bGwgbXQtMlwiLFxuICAgICAgICB3ZWVrZGF5czogXCJmbGV4XCIsXG4gICAgICAgIHdlZWtkYXk6IGNuKFxuICAgICAgICAgIFwidGV4dC1tdXRlZC1mb3JlZ3JvdW5kIHJvdW5kZWQtbWQgZm9udC1ub3JtYWxcIixcbiAgICAgICAgICBjb21wYWN0ID8gXCJ3LTYgc206dy03IHRleHQteHMgc206dGV4dC1zbVwiIDogXCJ3LTggdGV4dC1zbVwiLFxuICAgICAgICApLFxuICAgICAgICBkYXk6IGNuKFxuICAgICAgICAgIFwicmVsYXRpdmUgcC0wIGZvY3VzLXdpdGhpbjpyZWxhdGl2ZSBmb2N1cy13aXRoaW46ei0yMCBbJjpoYXMoW2FyaWEtc2VsZWN0ZWRdKV06YmctYWNjZW50IFsmOmhhcyhbYXJpYS1zZWxlY3RlZF0ub3V0c2lkZSldOmJnLWFjY2VudC81MFwiLFxuICAgICAgICAgIHByb3BzLm1vZGUgPT09IFwicmFuZ2VcIlxuICAgICAgICAgICAgPyBcIlsmLnJhbmdlLWVuZF06cm91bmRlZC1yLW1kIFsmLnJhbmdlLXN0YXJ0XTpyb3VuZGVkLWwtbWQgZmlyc3Q6WyY6aGFzKFthcmlhLXNlbGVjdGVkXSldOnJvdW5kZWQtbC1tZCBsYXN0OlsmOmhhcyhbYXJpYS1zZWxlY3RlZF0pXTpyb3VuZGVkLXItbWRcIlxuICAgICAgICAgICAgOiBcInJvdW5kZWQtbWRcIixcbiAgICAgICAgKSxcbiAgICAgICAgZGF5X2J1dHRvbjogY24oXG4gICAgICAgICAgYnV0dG9uVmFyaWFudHMoeyB2YXJpYW50OiBcImdob3N0XCIgfSksXG4gICAgICAgICAgXCJbJjpob3Zlcl06YmctdHJhbnNwYXJlbnQgWyY6aG92ZXJdOnRleHQtaW5oZXJpdFwiLCAvLyBEaXNhYmxlIHRoZSBnaG9zdCBidXR0b24gaG92ZXJcbiAgICAgICAgICBjb21wYWN0XG4gICAgICAgICAgICA/IFwiaC02IHctNiBzbTpoLTcgc206dy03IHAtMCB0ZXh0LXhzIHNtOnRleHQtc21cIlxuICAgICAgICAgICAgOiBcImgtOCB3LTggcC0wLjUgdGV4dC1zbVwiLFxuICAgICAgICAgIFwidGV4dC1jZW50ZXIgZm9udC1ub3JtYWxcIixcbiAgICAgICAgKSxcbiAgICAgICAgcmFuZ2Vfc3RhcnQ6IFwicmFuZ2Utc3RhcnRcIixcbiAgICAgICAgcmFuZ2VfZW5kOiBcInJhbmdlLWVuZFwiLFxuICAgICAgICBzZWxlY3RlZDpcbiAgICAgICAgICBcImJnLXByaW1hcnkgdGV4dC1wcmltYXJ5LWZvcmVncm91bmQgaG92ZXI6YmctcHJpbWFyeSBob3Zlcjp0ZXh0LXByaW1hcnktZm9yZWdyb3VuZCBmb2N1czpiZy1wcmltYXJ5IGZvY3VzOnRleHQtcHJpbWFyeS1mb3JlZ3JvdW5kXCIsXG4gICAgICAgIHRvZGF5OiBcImJnLWFjY2VudCB0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kXCIsXG4gICAgICAgIG91dHNpZGU6XG4gICAgICAgICAgXCJvdXRzaWRlIHRleHQtbXV0ZWQtZm9yZWdyb3VuZCBvcGFjaXR5LTUwICBhcmlhLXNlbGVjdGVkOmJnLWFjY2VudC81MCBhcmlhLXNlbGVjdGVkOnRleHQtbXV0ZWQtZm9yZWdyb3VuZCBhcmlhLXNlbGVjdGVkOm9wYWNpdHktMzBcIixcbiAgICAgICAgZGlzYWJsZWQ6IFwidGV4dC1tdXRlZC1mb3JlZ3JvdW5kIG9wYWNpdHktNTBcIixcbiAgICAgICAgcmFuZ2VfbWlkZGxlOlxuICAgICAgICAgIFwiYXJpYS1zZWxlY3RlZDpiZy1hY2NlbnQgYXJpYS1zZWxlY3RlZDp0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kXCIsXG4gICAgICAgIGhpZGRlbjogXCJpbnZpc2libGVcIixcbiAgICAgICAgLi4uY2xhc3NOYW1lcyxcbiAgICAgIH19XG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKTtcbn1cbkNhbGVuZGFyLmRpc3BsYXlOYW1lID0gXCJDYWxlbmRhclwiO1xuXG5leHBvcnQgeyBDYWxlbmRhciB9O1xuIl19