define(["require", "exports", "react/jsx-runtime", "react", "@radix-ui/react-slot", "lucide-react", "@/lib/utils"], function (require, exports, jsx_runtime_1, React, react_slot_1, lucide_react_1, utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BreadcrumbEllipsis = exports.BreadcrumbSeparator = exports.BreadcrumbPage = exports.BreadcrumbLink = exports.BreadcrumbItem = exports.BreadcrumbList = exports.Breadcrumb = void 0;
    const Breadcrumb = React.forwardRef(({ ...props }, ref) => (0, jsx_runtime_1.jsx)("nav", { ref: ref, "aria-label": "breadcrumb", ...props }));
    exports.Breadcrumb = Breadcrumb;
    Breadcrumb.displayName = "Breadcrumb";
    const BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => ((0, jsx_runtime_1.jsx)("ol", { ref: ref, className: (0, utils_1.cn)("flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5", className), ...props })));
    exports.BreadcrumbList = BreadcrumbList;
    BreadcrumbList.displayName = "BreadcrumbList";
    const BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => ((0, jsx_runtime_1.jsx)("li", { ref: ref, className: (0, utils_1.cn)("inline-flex items-center gap-1.5", className), ...props })));
    exports.BreadcrumbItem = BreadcrumbItem;
    BreadcrumbItem.displayName = "BreadcrumbItem";
    const BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {
        const Comp = asChild ? react_slot_1.Slot : "a";
        return ((0, jsx_runtime_1.jsx)(Comp, { ref: ref, className: (0, utils_1.cn)("transition-colors hover:text-foreground", className), ...props }));
    });
    exports.BreadcrumbLink = BreadcrumbLink;
    BreadcrumbLink.displayName = "BreadcrumbLink";
    const BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => ((0, jsx_runtime_1.jsx)("span", { ref: ref, role: "link", "aria-disabled": "true", "aria-current": "page", className: (0, utils_1.cn)("font-normal text-foreground", className), ...props })));
    exports.BreadcrumbPage = BreadcrumbPage;
    BreadcrumbPage.displayName = "BreadcrumbPage";
    const BreadcrumbSeparator = ({ children, className, ...props }) => ((0, jsx_runtime_1.jsx)("li", { role: "presentation", "aria-hidden": "true", className: (0, utils_1.cn)("[&>svg]:w-3.5 [&>svg]:h-3.5", className), ...props, children: children !== null && children !== void 0 ? children : (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, {}) }));
    exports.BreadcrumbSeparator = BreadcrumbSeparator;
    BreadcrumbSeparator.displayName = "BreadcrumbSeparator";
    const BreadcrumbEllipsis = ({ className, ...props }) => ((0, jsx_runtime_1.jsxs)("span", { role: "presentation", "aria-hidden": "true", className: (0, utils_1.cn)("flex h-9 w-9 items-center justify-center", className), ...props, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MoreHorizontal, { className: "h-4 w-4" }), (0, jsx_runtime_1.jsx)("span", { className: "sr-only", children: "More" })] }));
    exports.BreadcrumbEllipsis = BreadcrumbEllipsis;
    BreadcrumbEllipsis.displayName = "BreadcrumbElipssis";
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL2JyZWFkY3J1bWIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7SUFNQSxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUtqQyxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLGdDQUFLLEdBQUcsRUFBRSxHQUFHLGdCQUFhLFlBQVksS0FBSyxLQUFLLEdBQUksQ0FBQyxDQUFDO0lBZ0c3RSxnQ0FBVTtJQS9GWixVQUFVLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQztJQUV0QyxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUdyQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUNsQywrQkFDRSxHQUFHLEVBQUUsR0FBRyxFQUNSLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFDWCwwRkFBMEYsRUFDMUYsU0FBUyxDQUNWLEtBQ0csS0FBSyxHQUNULENBQ0gsQ0FBQyxDQUFDO0lBa0ZELHdDQUFjO0lBakZoQixjQUFjLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDO0lBRTlDLE1BQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBR3JDLENBQUMsRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQ2xDLCtCQUNFLEdBQUcsRUFBRSxHQUFHLEVBQ1IsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLGtDQUFrQyxFQUFFLFNBQVMsQ0FBQyxLQUN4RCxLQUFLLEdBQ1QsQ0FDSCxDQUFDLENBQUM7SUF1RUQsd0NBQWM7SUF0RWhCLGNBQWMsQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLENBQUM7SUFFOUMsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FLckMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUMxQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLGlCQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUVsQyxPQUFPLENBQ0wsdUJBQUMsSUFBSSxJQUNILEdBQUcsRUFBRSxHQUFHLEVBQ1IsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLHlDQUF5QyxFQUFFLFNBQVMsQ0FBQyxLQUMvRCxLQUFLLEdBQ1QsQ0FDSCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFzREQsd0NBQWM7SUFyRGhCLGNBQWMsQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLENBQUM7SUFFOUMsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FHckMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FDbEMsaUNBQ0UsR0FBRyxFQUFFLEdBQUcsRUFDUixJQUFJLEVBQUMsTUFBTSxtQkFDRyxNQUFNLGtCQUNQLE1BQU0sRUFDbkIsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLDZCQUE2QixFQUFFLFNBQVMsQ0FBQyxLQUNuRCxLQUFLLEdBQ1QsQ0FDSCxDQUFDLENBQUM7SUF3Q0Qsd0NBQWM7SUF2Q2hCLGNBQWMsQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLENBQUM7SUFFOUMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQzNCLFFBQVEsRUFDUixTQUFTLEVBQ1QsR0FBRyxLQUFLLEVBQ21CLEVBQUUsRUFBRSxDQUFDLENBQ2hDLCtCQUNFLElBQUksRUFBQyxjQUFjLGlCQUNQLE1BQU0sRUFDbEIsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLDZCQUE2QixFQUFFLFNBQVMsQ0FBQyxLQUNuRCxLQUFLLFlBRVIsUUFBUSxhQUFSLFFBQVEsY0FBUixRQUFRLEdBQUksdUJBQUMsMkJBQVksS0FBRyxHQUMxQixDQUNOLENBQUM7SUF5QkEsa0RBQW1CO0lBeEJyQixtQkFBbUIsQ0FBQyxXQUFXLEdBQUcscUJBQXFCLENBQUM7SUFFeEQsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQzFCLFNBQVMsRUFDVCxHQUFHLEtBQUssRUFDcUIsRUFBRSxFQUFFLENBQUMsQ0FDbEMsa0NBQ0UsSUFBSSxFQUFDLGNBQWMsaUJBQ1AsTUFBTSxFQUNsQixTQUFTLEVBQUUsSUFBQSxVQUFFLEVBQUMsMENBQTBDLEVBQUUsU0FBUyxDQUFDLEtBQ2hFLEtBQUssYUFFVCx1QkFBQyw2QkFBYyxJQUFDLFNBQVMsRUFBQyxTQUFTLEdBQUcsRUFDdEMsaUNBQU0sU0FBUyxFQUFDLFNBQVMscUJBQVksSUFDaEMsQ0FDUixDQUFDO0lBVUEsZ0RBQWtCO0lBVHBCLGtCQUFrQixDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU2xvdCB9IGZyb20gXCJAcmFkaXgtdWkvcmVhY3Qtc2xvdFwiO1xuaW1wb3J0IHsgQ2hldnJvblJpZ2h0LCBNb3JlSG9yaXpvbnRhbCB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcblxuaW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIjtcblxuY29uc3QgQnJlYWRjcnVtYiA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIEhUTUxFbGVtZW50LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8XCJuYXZcIj4gJiB7XG4gICAgc2VwYXJhdG9yPzogUmVhY3QuUmVhY3ROb2RlO1xuICB9XG4+KCh7IC4uLnByb3BzIH0sIHJlZikgPT4gPG5hdiByZWY9e3JlZn0gYXJpYS1sYWJlbD1cImJyZWFkY3J1bWJcIiB7Li4ucHJvcHN9IC8+KTtcbkJyZWFkY3J1bWIuZGlzcGxheU5hbWUgPSBcIkJyZWFkY3J1bWJcIjtcblxuY29uc3QgQnJlYWRjcnVtYkxpc3QgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBIVE1MT0xpc3RFbGVtZW50LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8XCJvbFwiPlxuPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICA8b2xcbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgXCJmbGV4IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXIgZ2FwLTEuNSBicmVhay13b3JkcyB0ZXh0LXNtIHRleHQtbXV0ZWQtZm9yZWdyb3VuZCBzbTpnYXAtMi41XCIsXG4gICAgICBjbGFzc05hbWUsXG4gICAgKX1cbiAgICB7Li4ucHJvcHN9XG4gIC8+XG4pKTtcbkJyZWFkY3J1bWJMaXN0LmRpc3BsYXlOYW1lID0gXCJCcmVhZGNydW1iTGlzdFwiO1xuXG5jb25zdCBCcmVhZGNydW1iSXRlbSA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIEhUTUxMSUVsZW1lbnQsXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjxcImxpXCI+XG4+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxsaVxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT17Y24oXCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTEuNVwiLCBjbGFzc05hbWUpfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpO1xuQnJlYWRjcnVtYkl0ZW0uZGlzcGxheU5hbWUgPSBcIkJyZWFkY3J1bWJJdGVtXCI7XG5cbmNvbnN0IEJyZWFkY3J1bWJMaW5rID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgSFRNTEFuY2hvckVsZW1lbnQsXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjxcImFcIj4gJiB7XG4gICAgYXNDaGlsZD86IGJvb2xlYW47XG4gIH1cbj4oKHsgYXNDaGlsZCwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgY29uc3QgQ29tcCA9IGFzQ2hpbGQgPyBTbG90IDogXCJhXCI7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29tcFxuICAgICAgcmVmPXtyZWZ9XG4gICAgICBjbGFzc05hbWU9e2NuKFwidHJhbnNpdGlvbi1jb2xvcnMgaG92ZXI6dGV4dC1mb3JlZ3JvdW5kXCIsIGNsYXNzTmFtZSl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKTtcbn0pO1xuQnJlYWRjcnVtYkxpbmsuZGlzcGxheU5hbWUgPSBcIkJyZWFkY3J1bWJMaW5rXCI7XG5cbmNvbnN0IEJyZWFkY3J1bWJQYWdlID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgSFRNTFNwYW5FbGVtZW50LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8XCJzcGFuXCI+XG4+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxzcGFuXG4gICAgcmVmPXtyZWZ9XG4gICAgcm9sZT1cImxpbmtcIlxuICAgIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCJcbiAgICBhcmlhLWN1cnJlbnQ9XCJwYWdlXCJcbiAgICBjbGFzc05hbWU9e2NuKFwiZm9udC1ub3JtYWwgdGV4dC1mb3JlZ3JvdW5kXCIsIGNsYXNzTmFtZSl9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKSk7XG5CcmVhZGNydW1iUGFnZS5kaXNwbGF5TmFtZSA9IFwiQnJlYWRjcnVtYlBhZ2VcIjtcblxuY29uc3QgQnJlYWRjcnVtYlNlcGFyYXRvciA9ICh7XG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIC4uLnByb3BzXG59OiBSZWFjdC5Db21wb25lbnRQcm9wczxcImxpXCI+KSA9PiAoXG4gIDxsaVxuICAgIHJvbGU9XCJwcmVzZW50YXRpb25cIlxuICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgY2xhc3NOYW1lPXtjbihcIlsmPnN2Z106dy0zLjUgWyY+c3ZnXTpoLTMuNVwiLCBjbGFzc05hbWUpfVxuICAgIHsuLi5wcm9wc31cbiAgPlxuICAgIHtjaGlsZHJlbiA/PyA8Q2hldnJvblJpZ2h0IC8+fVxuICA8L2xpPlxuKTtcbkJyZWFkY3J1bWJTZXBhcmF0b3IuZGlzcGxheU5hbWUgPSBcIkJyZWFkY3J1bWJTZXBhcmF0b3JcIjtcblxuY29uc3QgQnJlYWRjcnVtYkVsbGlwc2lzID0gKHtcbiAgY2xhc3NOYW1lLFxuICAuLi5wcm9wc1xufTogUmVhY3QuQ29tcG9uZW50UHJvcHM8XCJzcGFuXCI+KSA9PiAoXG4gIDxzcGFuXG4gICAgcm9sZT1cInByZXNlbnRhdGlvblwiXG4gICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICBjbGFzc05hbWU9e2NuKFwiZmxleCBoLTkgdy05IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiLCBjbGFzc05hbWUpfVxuICAgIHsuLi5wcm9wc31cbiAgPlxuICAgIDxNb3JlSG9yaXpvbnRhbCBjbGFzc05hbWU9XCJoLTQgdy00XCIgLz5cbiAgICA8c3BhbiBjbGFzc05hbWU9XCJzci1vbmx5XCI+TW9yZTwvc3Bhbj5cbiAgPC9zcGFuPlxuKTtcbkJyZWFkY3J1bWJFbGxpcHNpcy5kaXNwbGF5TmFtZSA9IFwiQnJlYWRjcnVtYkVsaXBzc2lzXCI7XG5cbmV4cG9ydCB7XG4gIEJyZWFkY3J1bWIsXG4gIEJyZWFkY3J1bWJMaXN0LFxuICBCcmVhZGNydW1iSXRlbSxcbiAgQnJlYWRjcnVtYkxpbmssXG4gIEJyZWFkY3J1bWJQYWdlLFxuICBCcmVhZGNydW1iU2VwYXJhdG9yLFxuICBCcmVhZGNydW1iRWxsaXBzaXMsXG59O1xuIl19