define(["require", "exports", "react/jsx-runtime", "react", "@tanstack/react-table", "lucide-react", "@/components/ui/button", "@/components/ui/card", "@/components/ui/checkbox", "@/components/ui/dropdown-menu", "@/components/ui/table"], function (require, exports, jsx_runtime_1, React, react_table_1, lucide_react_1, button_1, card_1, checkbox_1, dropdown_menu_1, table_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.columns = void 0;
    exports.CardsPayments = CardsPayments;
    const data = [
        {
            id: "m5gr84i9",
            amount: 316,
            status: "success",
            email: "ken99@example.com",
        },
        {
            id: "3u1reuv4",
            amount: 242,
            status: "success",
            email: "Abe45@example.com",
        },
        {
            id: "derv1ws0",
            amount: 837,
            status: "processing",
            email: "Monserrat44@example.com",
        },
        {
            id: "bhqecj4p",
            amount: 721,
            status: "failed",
            email: "carmella@example.com",
        },
        {
            id: "k9f2m3n4",
            amount: 450,
            status: "pending",
            email: "jason78@example.com",
        },
        {
            id: "p5q6r7s8",
            amount: 1280,
            status: "success",
            email: "sarah23@example.com",
        },
    ];
    exports.columns = [
        {
            id: "select",
            header: ({ table }) => ((0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { checked: table.getIsAllPageRowsSelected() ||
                    (table.getIsSomePageRowsSelected() ? true : "indeterminate"), onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value), "aria-label": "Select all" })),
            cell: ({ row }) => ((0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { checked: row.getIsSelected(), onCheckedChange: (value) => row.toggleSelected(!!value), "aria-label": "Select row" })),
            enableSorting: false,
            enableHiding: false,
        },
        {
            accessorKey: "status",
            header: "Status",
            cell: ({ row }) => ((0, jsx_runtime_1.jsx)("div", { className: "capitalize", children: row.getValue("status") })),
        },
        {
            accessorKey: "email",
            header: "Email",
            cell: ({ row }) => (0, jsx_runtime_1.jsx)("div", { className: "lowercase", children: row.getValue("email") }),
        },
        {
            accessorKey: "amount",
            header: () => (0, jsx_runtime_1.jsx)("div", { className: "text-right", children: "Amount" }),
            cell: ({ row }) => {
                const amount = parseFloat(row.getValue("amount"));
                // Format the amount as a dollar amount
                const formatted = new Intl.NumberFormat("en-US", {
                    style: "currency",
                    currency: "USD",
                }).format(amount);
                return (0, jsx_runtime_1.jsx)("div", { className: "text-right font-medium", children: formatted });
            },
        },
        {
            id: "actions",
            enableHiding: false,
            cell: ({ row }) => {
                const payment = row.original;
                return ((0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenu, { children: [(0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "ghost", className: "size-8 p-0", children: [(0, jsx_runtime_1.jsx)("span", { className: "sr-only", children: "Open menu" }), (0, jsx_runtime_1.jsx)(lucide_react_1.MoreHorizontalIcon, {})] }) }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuContent, { align: "end", children: [(0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuLabel, { children: "Actions" }), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuItem, { onClick: () => navigator.clipboard.writeText(payment.id), children: "Copy payment ID" }), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuSeparator, {}), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuItem, { children: "View customer" }), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuItem, { children: "View payment details" })] })] }));
            },
        },
    ];
    function CardsPayments() {
        var _a;
        const [sorting, setSorting] = React.useState([]);
        const [columnFilters, setColumnFilters] = React.useState([]);
        const [columnVisibility, setColumnVisibility] = React.useState({});
        const [rowSelection, setRowSelection] = React.useState({});
        const table = (0, react_table_1.useReactTable)({
            data,
            columns: exports.columns,
            onSortingChange: setSorting,
            onColumnFiltersChange: setColumnFilters,
            getCoreRowModel: (0, react_table_1.getCoreRowModel)(),
            getPaginationRowModel: (0, react_table_1.getPaginationRowModel)(),
            getSortedRowModel: (0, react_table_1.getSortedRowModel)(),
            getFilteredRowModel: (0, react_table_1.getFilteredRowModel)(),
            onColumnVisibilityChange: setColumnVisibility,
            onRowSelectionChange: setRowSelection,
            state: {
                sorting,
                columnFilters,
                columnVisibility,
                rowSelection,
            },
        });
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: "text-xl", children: "Payments" }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: "Manage your payments." }), (0, jsx_runtime_1.jsx)(card_1.CardAction, { children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "secondary", size: "sm", className: "shadow-none", children: "Add Payment" }) })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "flex flex-col gap-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "rounded-md border", children: (0, jsx_runtime_1.jsxs)(table_1.Table, { children: [(0, jsx_runtime_1.jsx)(table_1.TableHeader, { children: table.getHeaderGroups().map((headerGroup) => ((0, jsx_runtime_1.jsx)(table_1.TableRow, { children: headerGroup.headers.map((header) => {
                                                return ((0, jsx_runtime_1.jsx)(table_1.TableHead, { className: "data-[name=actions]:w-10 data-[name=amount]:w-24 data-[name=select]:w-10 data-[name=status]:w-24 [&:has([role=checkbox])]:pl-3", "data-name": header.id, children: header.isPlaceholder
                                                        ? null
                                                        : (0, react_table_1.flexRender)(header.column.columnDef.header, header.getContext()) }, header.id));
                                            }) }, headerGroup.id))) }), (0, jsx_runtime_1.jsx)(table_1.TableBody, { children: ((_a = table.getRowModel().rows) === null || _a === void 0 ? void 0 : _a.length) ? (table.getRowModel().rows.map((row) => ((0, jsx_runtime_1.jsx)(table_1.TableRow, { "data-state": row.getIsSelected() && "selected", children: row.getVisibleCells().map((cell) => ((0, jsx_runtime_1.jsx)(table_1.TableCell, { className: "data-[name=actions]:w-10 data-[name=amount]:w-24 data-[name=select]:w-10 data-[name=status]:w-24 [&:has([role=checkbox])]:pl-3", "data-name": cell.column.id, children: (0, react_table_1.flexRender)(cell.column.columnDef.cell, cell.getContext()) }, cell.id))) }, row.id)))) : ((0, jsx_runtime_1.jsx)(table_1.TableRow, { children: (0, jsx_runtime_1.jsx)(table_1.TableCell, { colSpan: exports.columns.length, className: "h-24 text-center", children: "No results." }) })) })] }) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-end gap-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-muted-foreground flex-1 text-sm", children: [table.getFilteredSelectedRowModel().rows.length, " of", " ", table.getFilteredRowModel().rows.length, " row(s) selected."] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", onClick: () => table.previousPage(), disabled: !table.getCanPreviousPage(), children: "Previous" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", onClick: () => table.nextPage(), disabled: !table.getCanNextPage(), children: "Next" })] })] })] })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,