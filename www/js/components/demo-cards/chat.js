define(["require", "exports", "react/jsx-runtime", "react", "lucide-react", "@/lib/utils", "@/components/ui/avatar", "@/components/ui/button", "@/components/ui/card", "@/components/ui/command", "@/components/ui/dialog", "@/components/ui/input", "@/components/ui/tooltip"], function (require, exports, jsx_runtime_1, React, lucide_react_1, utils_1, avatar_1, button_1, card_1, command_1, dialog_1, input_1, tooltip_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CardsChat = CardsChat;
    const users = [
        {
            name: "Olivia Martin",
            email: "m@example.com",
            avatar: "/avatars/01.png",
        },
        {
            name: "Isabella Nguyen",
            email: "isabella.nguyen@email.com",
            avatar: "/avatars/03.png",
        },
        {
            name: "Emma Wilson",
            email: "emma@example.com",
            avatar: "/avatars/05.png",
        },
        {
            name: "Jackson Lee",
            email: "lee@example.com",
            avatar: "/avatars/02.png",
        },
        {
            name: "William Kim",
            email: "will@email.com",
            avatar: "/avatars/04.png",
        },
    ];
    function CardsChat() {
        const [open, setOpen] = React.useState(false);
        const [selectedUsers, setSelectedUsers] = React.useState([]);
        const [messages, setMessages] = React.useState([
            {
                role: "agent",
                content: "Hi, how can I help you today?",
            },
            {
                role: "user",
                content: "Hey, I'm having trouble with my account.",
            },
            {
                role: "agent",
                content: "What seems to be the problem?",
            },
            {
                role: "user",
                content: "I can't log in.",
            },
        ]);
        const [input, setInput] = React.useState("");
        const inputLength = input.trim().length;
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: "flex flex-row items-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-4", children: [(0, jsx_runtime_1.jsxs)(avatar_1.Avatar, { className: "border", children: [(0, jsx_runtime_1.jsx)(avatar_1.AvatarImage, { src: "/avatars/01.png", alt: "Image" }), (0, jsx_runtime_1.jsx)(avatar_1.AvatarFallback, { children: "S" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col gap-0.5", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm leading-none font-medium", children: "Sofia Davis" }), (0, jsx_runtime_1.jsx)("p", { className: "text-muted-foreground text-xs", children: "m@example.com" })] })] }), (0, jsx_runtime_1.jsx)(tooltip_1.TooltipProvider, { delayDuration: 0, children: (0, jsx_runtime_1.jsxs)(tooltip_1.Tooltip, { children: [(0, jsx_runtime_1.jsx)(tooltip_1.TooltipTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { size: "icon", variant: "secondary", className: "ml-auto size-8 rounded-full", onClick: () => setOpen(true), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.PlusIcon, {}), (0, jsx_runtime_1.jsx)("span", { className: "sr-only", children: "New message" })] }) }), (0, jsx_runtime_1.jsx)(tooltip_1.TooltipContent, { sideOffset: 10, children: "New message" })] }) })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: "flex flex-col gap-4", children: messages.map((message, index) => ((0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("flex w-max max-w-[75%] flex-col gap-2 rounded-lg px-3 py-2 text-sm", message.role === "user"
                                        ? "bg-primary text-primary-foreground ml-auto"
                                        : "bg-muted"), children: message.content }, index))) }) }), (0, jsx_runtime_1.jsx)(card_1.CardFooter, { children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: (event) => {
                                    event.preventDefault();
                                    if (inputLength === 0)
                                        return;
                                    setMessages([
                                        ...messages,
                                        {
                                            role: "user",
                                            content: input,
                                        },
                                    ]);
                                    setInput("");
                                }, className: "relative w-full", children: [(0, jsx_runtime_1.jsx)(input_1.Input, { id: "message", placeholder: "Type your message...", className: "flex-1 pr-10", autoComplete: "off", value: input, onChange: (event) => setInput(event.target.value) }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: "submit", size: "icon", className: "absolute top-1/2 right-2 size-6 -translate-y-1/2 rounded-full", disabled: inputLength === 0, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowUpIcon, { className: "size-3.5" }), (0, jsx_runtime_1.jsx)("span", { className: "sr-only", children: "Send" })] })] }) })] }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: open, onOpenChange: setOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "gap-0 p-0 outline-none", children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { className: "px-4 pt-5 pb-4", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "New message" }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: "Invite a user to this thread. This will create a new group message." })] }), (0, jsx_runtime_1.jsxs)(command_1.Command, { className: "overflow-hidden rounded-t-none border-t bg-transparent", children: [(0, jsx_runtime_1.jsx)(command_1.CommandInput, { placeholder: "Search user..." }), (0, jsx_runtime_1.jsxs)(command_1.CommandList, { children: [(0, jsx_runtime_1.jsx)(command_1.CommandEmpty, { children: "No users found." }), (0, jsx_runtime_1.jsx)(command_1.CommandGroup, { children: users.map((user) => ((0, jsx_runtime_1.jsxs)(command_1.CommandItem, { "data-active": selectedUsers.includes(user), className: "data-[active=true]:opacity-50", onSelect: () => {
                                                        if (selectedUsers.includes(user)) {
                                                            return setSelectedUsers(selectedUsers.filter((selectedUser) => selectedUser !== user));
                                                        }
                                                        return setSelectedUsers([...users].filter((u) => [...selectedUsers, user].includes(u)));
                                                    }, children: [(0, jsx_runtime_1.jsxs)(avatar_1.Avatar, { className: "border", children: [(0, jsx_runtime_1.jsx)(avatar_1.AvatarImage, { src: user.avatar, alt: "Image" }), (0, jsx_runtime_1.jsx)(avatar_1.AvatarFallback, { children: user.name[0] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "ml-2", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm leading-none font-medium", children: user.name }), (0, jsx_runtime_1.jsx)("p", { className: "text-muted-foreground text-sm", children: user.email })] }), selectedUsers.includes(user) ? ((0, jsx_runtime_1.jsx)(lucide_react_1.CheckIcon, { className: "text-primary ml-auto flex size-4" })) : null] }, user.email))) })] })] }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { className: "flex items-center border-t p-4 sm:justify-between", children: [selectedUsers.length > 0 ? ((0, jsx_runtime_1.jsx)("div", { className: "flex -space-x-2 overflow-hidden", children: selectedUsers.map((user) => ((0, jsx_runtime_1.jsxs)(avatar_1.Avatar, { className: "inline-block border", children: [(0, jsx_runtime_1.jsx)(avatar_1.AvatarImage, { src: user.avatar }), (0, jsx_runtime_1.jsx)(avatar_1.AvatarFallback, { children: user.name[0] })] }, user.email))) })) : ((0, jsx_runtime_1.jsx)("p", { className: "text-muted-foreground text-sm", children: "Select users to add to this thread." })), (0, jsx_runtime_1.jsx)(button_1.Button, { disabled: selectedUsers.length < 2, size: "sm", onClick: () => {
                                            setOpen(false);
                                        }, children: "Continue" })] })] }) })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,