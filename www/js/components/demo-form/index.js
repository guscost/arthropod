define(["require", "exports", "react/jsx-runtime", "sonner", "use-mask-input", "@hookform/resolvers/zod", "react-hook-form", "zod", "@/components/ui/button", "@/components/ui/card", "@/components/ui/form", "@/components/ui/input"], function (require, exports, jsx_runtime_1, sonner_1, use_mask_input_1, zod_1, react_hook_form_1, zod_2, button_1, card_1, form_1, input_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FormDemo = FormDemo;
    const formSchema = zod_2.z.object({
        email: zod_2.z.string().email("Must be a valid email."),
        phone: zod_2.z.string().min(12, {
            message: "Must be a valid phone number.",
        }),
        password: zod_2.z.string().min(8, {
            message: "Password must be at least 8 characters.",
        }),
    });
    function FormDemo() {
        // 1. Define your form.
        const form = (0, react_hook_form_1.useForm)({
            resolver: (0, zod_1.zodResolver)(formSchema),
            defaultValues: {
                email: "",
                phone: "",
                password: "",
            },
        });
        // 2. Define a submit handler.
        function onSubmit(values) {
            (0, sonner_1.toast)("Submitted:", {
                description: JSON.stringify(values, null, 2),
            });
        }
        const registerWithMask = (0, use_mask_input_1.useHookFormMask)(form.register);
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: "w-96", children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: "Form Demo" }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: "space-y-8", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "email", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Email" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "test@example.com", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "This email will not be shared with anyone." }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "phone", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Phone" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { className: "font-mono", placeholder: "(555) 555-5555", onKeyDown: (e) => {
                                                        if (e.currentTarget.value
                                                            .substring(0, e.currentTarget.selectionStart)
                                                            .includes("_")) {
                                                            const firstBlank = e.currentTarget.value.indexOf("_");
                                                            e.currentTarget.setSelectionRange(firstBlank, firstBlank);
                                                        }
                                                    }, ...field, ...registerWithMask("phone", "(999) 999-9999", {
                                                        placeholder: "_",
                                                        required: true,
                                                        showMaskOnHover: false,
                                                    }) }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "This phone number will not be shared with anyone." }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "password", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Password" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { type: "password", placeholder: "", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "Choose a strong password." }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", children: "Submit" })] }) }) })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,