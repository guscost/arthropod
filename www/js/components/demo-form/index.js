define(["require", "exports", "react/jsx-runtime", "sonner", "use-mask-input", "@hookform/resolvers/zod", "react-hook-form", "zod", "@/components/ui/button", "@/components/ui/card", "@/components/ui/form", "@/components/ui/input"], function (require, exports, jsx_runtime_1, sonner_1, use_mask_input_1, zod_1, react_hook_form_1, zod_2, button_1, card_1, form_1, input_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FormDemo = FormDemo;
    const formSchema = zod_2.z.object({
        email: zod_2.z.string().email("Must be a valid email."),
        phone: zod_2.z.string().min(12, {
            message: "Must be a valid phone number.",
        }),
        password: zod_2.z.string().min(8, {
            message: "Password must be at least 8 characters.",
        }),
    });
    function FormDemo() {
        // 1. Define your form.
        const form = (0, react_hook_form_1.useForm)({
            resolver: (0, zod_1.zodResolver)(formSchema),
            defaultValues: {
                email: "",
                phone: "",
                password: "",
            },
        });
        // 2. Define a submit handler.
        function onSubmit(values) {
            (0, sonner_1.toast)("Submitted:", {
                description: JSON.stringify(values, null, 2),
            });
        }
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: "w-96", children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: "Form Demo" }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: "space-y-8", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "email", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Email" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "test@example.com", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "This email will not be shared with anyone." }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "phone", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Phone" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "(555) 555-5555", ref: (0, use_mask_input_1.withMask)("(999) 999-9999"), ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "This phone number will not be shared with anyone." }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "password", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Password" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { type: "password", placeholder: "", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "Choose a strong password." }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", children: "Submit" })] }) }) })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9kZW1vLWZvcm0vaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7SUFBQSxZQUFZLENBQUM7OztJQStCYiw0QkFnRkM7SUExRkQsTUFBTSxVQUFVLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztRQUMxQixLQUFLLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQztRQUNqRCxLQUFLLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7WUFDeEIsT0FBTyxFQUFFLCtCQUErQjtTQUN6QyxDQUFDO1FBQ0YsUUFBUSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQzFCLE9BQU8sRUFBRSx5Q0FBeUM7U0FDbkQsQ0FBQztLQUNILENBQUMsQ0FBQztJQUVILFNBQWdCLFFBQVE7UUFDdEIsdUJBQXVCO1FBQ3ZCLE1BQU0sSUFBSSxHQUFHLElBQUEseUJBQU8sRUFBNkI7WUFDL0MsUUFBUSxFQUFFLElBQUEsaUJBQVcsRUFBQyxVQUFVLENBQUM7WUFDakMsYUFBYSxFQUFFO2dCQUNiLEtBQUssRUFBRSxFQUFFO2dCQUNULEtBQUssRUFBRSxFQUFFO2dCQUNULFFBQVEsRUFBRSxFQUFFO2FBQ2I7U0FDRixDQUFDLENBQUM7UUFFSCw4QkFBOEI7UUFDOUIsU0FBUyxRQUFRLENBQUMsTUFBa0M7WUFDbEQsSUFBQSxjQUFLLEVBQUMsWUFBWSxFQUFFO2dCQUNsQixXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUM3QyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsT0FBTyxDQUNMLHdCQUFDLFdBQUksSUFBQyxTQUFTLEVBQUMsTUFBTSxhQUNwQix1QkFBQyxpQkFBVSw0QkFBdUIsRUFDbEMsdUJBQUMsa0JBQVcsY0FDVix1QkFBQyxXQUFJLE9BQUssSUFBSSxZQUNaLGtDQUFNLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFNBQVMsRUFBQyxXQUFXLGFBQ2hFLHVCQUFDLGdCQUFTLElBQ1IsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQ3JCLElBQUksRUFBQyxPQUFPLEVBQ1osTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FDckIsd0JBQUMsZUFBUSxlQUNQLHVCQUFDLGdCQUFTLHdCQUFrQixFQUM1Qix1QkFBQyxrQkFBVyxjQUNWLHVCQUFDLGFBQUssSUFBQyxXQUFXLEVBQUMsa0JBQWtCLEtBQUssS0FBSyxHQUFJLEdBQ3ZDLEVBQ2QsdUJBQUMsc0JBQWUsNkRBRUUsRUFDbEIsdUJBQUMsa0JBQVcsS0FBRyxJQUNOLENBQ1osR0FDRCxFQUNGLHVCQUFDLGdCQUFTLElBQ1IsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQ3JCLElBQUksRUFBQyxPQUFPLEVBQ1osTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FDckIsd0JBQUMsZUFBUSxlQUNQLHVCQUFDLGdCQUFTLHdCQUFrQixFQUM1Qix1QkFBQyxrQkFBVyxjQUNWLHVCQUFDLGFBQUssSUFDSixXQUFXLEVBQUMsZ0JBQWdCLEVBQzVCLEdBQUcsRUFBRSxJQUFBLHlCQUFRLEVBQUMsZ0JBQWdCLENBQUMsS0FDM0IsS0FBSyxHQUNULEdBQ1UsRUFDZCx1QkFBQyxzQkFBZSxvRUFFRSxFQUNsQix1QkFBQyxrQkFBVyxLQUFHLElBQ04sQ0FDWixHQUNELEVBQ0YsdUJBQUMsZ0JBQVMsSUFDUixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFDckIsSUFBSSxFQUFDLFVBQVUsRUFDZixNQUFNLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUNyQix3QkFBQyxlQUFRLGVBQ1AsdUJBQUMsZ0JBQVMsMkJBQXFCLEVBQy9CLHVCQUFDLGtCQUFXLGNBQ1YsdUJBQUMsYUFBSyxJQUFDLElBQUksRUFBQyxVQUFVLEVBQUMsV0FBVyxFQUFDLEVBQUUsS0FBSyxLQUFLLEdBQUksR0FDdkMsRUFDZCx1QkFBQyxzQkFBZSw0Q0FBNEMsRUFDNUQsdUJBQUMsa0JBQVcsS0FBRyxJQUNOLENBQ1osR0FDRCxFQUNGLHVCQUFDLGVBQU0sSUFBQyxJQUFJLEVBQUMsUUFBUSx1QkFBZ0IsSUFDaEMsR0FDRixHQUNLLElBQ1QsQ0FDUixDQUFDO0lBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgeyB0b2FzdCB9IGZyb20gXCJzb25uZXJcIjtcbmltcG9ydCB7IHdpdGhNYXNrIH0gZnJvbSBcInVzZS1tYXNrLWlucHV0XCI7XG5pbXBvcnQgeyB6b2RSZXNvbHZlciB9IGZyb20gXCJAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZFwiO1xuaW1wb3J0IHsgdXNlRm9ybSB9IGZyb20gXCJyZWFjdC1ob29rLWZvcm1cIjtcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5cbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvYnV0dG9uXCI7XG5pbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZEhlYWRlciB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvY2FyZFwiO1xuaW1wb3J0IHtcbiAgRm9ybSxcbiAgRm9ybUNvbnRyb2wsXG4gIEZvcm1EZXNjcmlwdGlvbixcbiAgRm9ybUZpZWxkLFxuICBGb3JtSXRlbSxcbiAgRm9ybUxhYmVsLFxuICBGb3JtTWVzc2FnZSxcbn0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9mb3JtXCI7XG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvaW5wdXRcIjtcblxuY29uc3QgZm9ybVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgZW1haWw6IHouc3RyaW5nKCkuZW1haWwoXCJNdXN0IGJlIGEgdmFsaWQgZW1haWwuXCIpLFxuICBwaG9uZTogei5zdHJpbmcoKS5taW4oMTIsIHtcbiAgICBtZXNzYWdlOiBcIk11c3QgYmUgYSB2YWxpZCBwaG9uZSBudW1iZXIuXCIsXG4gIH0pLFxuICBwYXNzd29yZDogei5zdHJpbmcoKS5taW4oOCwge1xuICAgIG1lc3NhZ2U6IFwiUGFzc3dvcmQgbXVzdCBiZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMuXCIsXG4gIH0pLFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBGb3JtRGVtbygpIHtcbiAgLy8gMS4gRGVmaW5lIHlvdXIgZm9ybS5cbiAgY29uc3QgZm9ybSA9IHVzZUZvcm08ei5pbmZlcjx0eXBlb2YgZm9ybVNjaGVtYT4+KHtcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoZm9ybVNjaGVtYSksXG4gICAgZGVmYXVsdFZhbHVlczoge1xuICAgICAgZW1haWw6IFwiXCIsXG4gICAgICBwaG9uZTogXCJcIixcbiAgICAgIHBhc3N3b3JkOiBcIlwiLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIDIuIERlZmluZSBhIHN1Ym1pdCBoYW5kbGVyLlxuICBmdW5jdGlvbiBvblN1Ym1pdCh2YWx1ZXM6IHouaW5mZXI8dHlwZW9mIGZvcm1TY2hlbWE+KSB7XG4gICAgdG9hc3QoXCJTdWJtaXR0ZWQ6XCIsIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBKU09OLnN0cmluZ2lmeSh2YWx1ZXMsIG51bGwsIDIpLFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Q2FyZCBjbGFzc05hbWU9XCJ3LTk2XCI+XG4gICAgICA8Q2FyZEhlYWRlcj5Gb3JtIERlbW88L0NhcmRIZWFkZXI+XG4gICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgIDxGb3JtIHsuLi5mb3JtfT5cbiAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17Zm9ybS5oYW5kbGVTdWJtaXQob25TdWJtaXQpfSBjbGFzc05hbWU9XCJzcGFjZS15LThcIj5cbiAgICAgICAgICAgIDxGb3JtRmllbGRcbiAgICAgICAgICAgICAgY29udHJvbD17Zm9ybS5jb250cm9sfVxuICAgICAgICAgICAgICBuYW1lPVwiZW1haWxcIlxuICAgICAgICAgICAgICByZW5kZXI9eyh7IGZpZWxkIH0pID0+IChcbiAgICAgICAgICAgICAgICA8Rm9ybUl0ZW0+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUxhYmVsPkVtYWlsPC9Gb3JtTGFiZWw+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dCBwbGFjZWhvbGRlcj1cInRlc3RAZXhhbXBsZS5jb21cIiB7Li4uZmllbGR9IC8+XG4gICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgPEZvcm1EZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgVGhpcyBlbWFpbCB3aWxsIG5vdCBiZSBzaGFyZWQgd2l0aCBhbnlvbmUuXG4gICAgICAgICAgICAgICAgICA8L0Zvcm1EZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtTWVzc2FnZSAvPlxuICAgICAgICAgICAgICAgIDwvRm9ybUl0ZW0+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEZvcm1GaWVsZFxuICAgICAgICAgICAgICBjb250cm9sPXtmb3JtLmNvbnRyb2x9XG4gICAgICAgICAgICAgIG5hbWU9XCJwaG9uZVwiXG4gICAgICAgICAgICAgIHJlbmRlcj17KHsgZmllbGQgfSkgPT4gKFxuICAgICAgICAgICAgICAgIDxGb3JtSXRlbT5cbiAgICAgICAgICAgICAgICAgIDxGb3JtTGFiZWw+UGhvbmU8L0Zvcm1MYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCIoNTU1KSA1NTUtNTU1NVwiXG4gICAgICAgICAgICAgICAgICAgICAgcmVmPXt3aXRoTWFzayhcIig5OTkpIDk5OS05OTk5XCIpfVxuICAgICAgICAgICAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICA8Rm9ybURlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICBUaGlzIHBob25lIG51bWJlciB3aWxsIG5vdCBiZSBzaGFyZWQgd2l0aCBhbnlvbmUuXG4gICAgICAgICAgICAgICAgICA8L0Zvcm1EZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtTWVzc2FnZSAvPlxuICAgICAgICAgICAgICAgIDwvRm9ybUl0ZW0+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEZvcm1GaWVsZFxuICAgICAgICAgICAgICBjb250cm9sPXtmb3JtLmNvbnRyb2x9XG4gICAgICAgICAgICAgIG5hbWU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgIHJlbmRlcj17KHsgZmllbGQgfSkgPT4gKFxuICAgICAgICAgICAgICAgIDxGb3JtSXRlbT5cbiAgICAgICAgICAgICAgICAgIDxGb3JtTGFiZWw+UGFzc3dvcmQ8L0Zvcm1MYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0IHR5cGU9XCJwYXNzd29yZFwiIHBsYWNlaG9sZGVyPVwiXCIgey4uLmZpZWxkfSAvPlxuICAgICAgICAgICAgICAgICAgPC9Gb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgIDxGb3JtRGVzY3JpcHRpb24+Q2hvb3NlIGEgc3Ryb25nIHBhc3N3b3JkLjwvRm9ybURlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgPEZvcm1NZXNzYWdlIC8+XG4gICAgICAgICAgICAgICAgPC9Gb3JtSXRlbT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIj5TdWJtaXQ8L0J1dHRvbj5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvRm9ybT5cbiAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgPC9DYXJkPlxuICApO1xufVxuIl19