define(["require", "exports", "react/jsx-runtime", "wouter", "@hookform/resolvers/zod", "date-fns", "lucide-react", "react-hook-form", "sonner", "zod", "@/lib/utils", "@/components/ui/button", "@/components/ui/calendar-v9", "@/components/ui/checkbox", "@/components/ui/form", "@/components/ui/input", "@/components/ui/popover", "@/components/ui/radio-group", "@/components/ui/select", "@/components/ui/switch", "@/components/ui/textarea"], function (require, exports, jsx_runtime_1, wouter_1, zod_1, date_fns_1, lucide_react_1, react_hook_form_1, sonner_1, zod_2, utils_1, button_1, calendar_v9_1, checkbox_1, form_1, input_1, popover_1, radio_group_1, select_1, switch_1, textarea_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FormDemo = FormDemo;
    const items = [
        {
            id: "recents",
            label: "Recents",
        },
        {
            id: "home",
            label: "Home",
        },
        {
            id: "applications",
            label: "Applications",
        },
        {
            id: "desktop",
            label: "Desktop",
        },
        {
            id: "downloads",
            label: "Downloads",
        },
        {
            id: "documents",
            label: "Documents",
        },
    ];
    const FormSchema = zod_2.z.object({
        username: zod_2.z.string().min(2, {
            message: "Username must be at least 2 characters.",
        }),
        bio: zod_2.z
            .string()
            .min(10, {
            message: "Bio must be at least 10 characters.",
        })
            .max(160, {
            message: "Bio must not be longer than 30 characters.",
        }),
        email: zod_2.z
            .string({
            required_error: "Please select an email to display.",
        })
            .email(),
        type: zod_2.z.enum(["all", "mentions", "none"], {
            required_error: "You need to select a notification type.",
        }),
        mobile: zod_2.z.boolean().default(false).optional(),
        items: zod_2.z.array(zod_2.z.string()).refine((value) => value.some((item) => item), {
            message: "You have to select at least one item.",
        }),
        dob: zod_2.z.date({
            required_error: "A date of birth is required.",
        }),
        marketing_emails: zod_2.z.boolean().default(false).optional(),
        security_emails: zod_2.z.boolean(),
    });
    function FormDemo() {
        const form = (0, react_hook_form_1.useForm)({
            // @ts-ignore
            resolver: (0, zod_1.zodResolver)(FormSchema),
            defaultValues: {
                username: "",
                items: ["recents", "home"],
            },
        });
        function onSubmit(data) {
            (0, sonner_1.toast)("You submitted the following values:", {
                description: ((0, jsx_runtime_1.jsx)("pre", { className: "mt-2 w-[340px] rounded-md bg-slate-950 p-4", children: (0, jsx_runtime_1.jsx)("code", { className: "text-white", children: JSON.stringify(data, null, 2) }) })),
            });
        }
        return ((0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: "grid w-full max-w-sm gap-6", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "username", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Username" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "shadcn", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "This is your public display name." }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "email", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Email" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select a verified email to display" }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "m@example.com", children: "m@example.com" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "m@google.com", children: "m@google.com" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "m@support.com", children: "m@support.com" })] })] }), (0, jsx_runtime_1.jsxs)(form_1.FormDescription, { children: ["You can manage email addresses in your", " ", (0, jsx_runtime_1.jsx)(wouter_1.Link, { href: "/examples/forms", children: "email settings" }), "."] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "bio", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Bio" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: "Tell us a little bit about yourself", className: "resize-none", ...field }) }), (0, jsx_runtime_1.jsxs)(form_1.FormDescription, { children: ["You can ", (0, jsx_runtime_1.jsx)("span", { children: "@mention" }), " other users and organizations."] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "type", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "space-y-3", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Notify me about..." }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)(radio_group_1.RadioGroup, { onValueChange: field.onChange, defaultValue: field.value, className: "flex flex-col space-y-1", children: [(0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex items-center space-y-0 space-x-3", children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(radio_group_1.RadioGroupItem, { value: "all" }) }), (0, jsx_runtime_1.jsx)(form_1.FormLabel, { className: "font-normal", children: "All new messages" })] }), (0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex items-center space-y-0 space-x-3", children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(radio_group_1.RadioGroupItem, { value: "mentions" }) }), (0, jsx_runtime_1.jsx)(form_1.FormLabel, { className: "font-normal", children: "Direct messages and mentions" })] }), (0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex items-center space-y-0 space-x-3", children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(radio_group_1.RadioGroupItem, { value: "none" }) }), (0, jsx_runtime_1.jsx)(form_1.FormLabel, { className: "font-normal", children: "Nothing" })] })] }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "mobile", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex flex-row items-start space-y-0 space-x-3 rounded-md border p-4 shadow", children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { checked: field.value, onCheckedChange: field.onChange }) }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-1 leading-none", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Use different settings for my mobile devices" }), (0, jsx_runtime_1.jsxs)(form_1.FormDescription, { children: ["You can manage your mobile notifications in the", " ", (0, jsx_runtime_1.jsx)(wouter_1.Link, { href: "/examples/forms", children: "mobile settings" }), " page."] })] })] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "items", render: () => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)("div", { className: "mb-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { className: "text-base", children: "Sidebar" }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "Select the items you want to display in the sidebar." })] }), items.map((item) => ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "items", render: ({ field }) => {
                                        var _a;
                                        return ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex flex-row items-start space-y-0 space-x-3", children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { checked: (_a = field.value) === null || _a === void 0 ? void 0 : _a.includes(item.id), onCheckedChange: (checked) => {
                                                            var _a;
                                                            return checked
                                                                ? field.onChange([...field.value, item.id])
                                                                : field.onChange((_a = field.value) === null || _a === void 0 ? void 0 : _a.filter((value) => value !== item.id));
                                                        } }) }), (0, jsx_runtime_1.jsx)(form_1.FormLabel, { className: "text-sm font-normal", children: item.label })] }, item.id));
                                    } }, item.id))), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "dob", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex flex-col", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Date of birth" }), (0, jsx_runtime_1.jsxs)(popover_1.Popover, { children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", className: (0, utils_1.cn)("w-[240px] pl-3 text-left font-normal", !field.value && "text-muted-foreground"), children: [field.value ? ((0, date_fns_1.format)(field.value, "PPP")) : ((0, jsx_runtime_1.jsx)("span", { children: "Pick a date" })), (0, jsx_runtime_1.jsx)(lucide_react_1.CalendarIcon, { className: "ml-auto h-4 w-4 opacity-50" })] }) }) }), (0, jsx_runtime_1.jsx)(popover_1.PopoverContent, { className: "w-auto p-0", align: "start", children: (0, jsx_runtime_1.jsx)(calendar_v9_1.Calendar, { mode: "single", selected: field.value, onSelect: field.onChange, disabled: (date) => date > new Date() || date < new Date("1900-01-01"), initialFocus: true }) })] }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "Your date of birth is used to calculate your age." }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: "mb-4 text-lg font-medium", children: "Email Notifications" }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "marketing_emails", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-0.5", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Marketing emails" }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "Receive emails about new products, features, and more." })] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(switch_1.Switch, { checked: field.value, onCheckedChange: field.onChange }) })] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "security_emails", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-0.5", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Security emails" }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "Receive emails about your account security." })] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(switch_1.Switch, { checked: field.value, onCheckedChange: field.onChange, disabled: true, "aria-readonly": true }) })] })) })] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", children: "Submit" })] }) }));
    }
});
//# sourceMappingURL=data:application/json;base64,