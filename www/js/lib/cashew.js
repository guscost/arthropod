// Custom AMD-like shim script to provide `require` and `define`
// Script load order matters, no circular dependencies
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _this = this;
var __MODULES__ = {
    pending: {},
    cache: new Proxy({}, {
        set: function (obj, prop, value) {
            Reflect.set(obj, prop, value);
            Object.entries(__MODULES__.pending).forEach(function (_a) {
                var key = _a[0], _b = _a[1], unmetDeps = _b.unmetDeps, load = _b.load;
                if (unmetDeps.every(function (name) { return name in __MODULES__.cache; })) {
                    delete __MODULES__.pending[key];
                    load();
                }
            });
            return true;
        },
    }),
    resolveDep: function (dep, current) {
        if (/^\.\.?\//.test(dep)) {
            var absolutePath = current.split("/").slice(0, -1);
            var relativeDep = dep.split("/");
            while (relativeDep[0] === "..") {
                relativeDep.shift();
                absolutePath.pop();
            }
            while (relativeDep[0] === ".") {
                relativeDep.shift();
            }
            dep = __spreadArray(__spreadArray([], absolutePath, true), relativeDep, true).join("/");
        }
        else {
            dep = dep.replace(/^@?\//, "/js/");
        }
        return dep;
    },
};
// Require is a simple lookup in the module cache, no async support yet
var require = function (name) { return __MODULES__.cache[name]; };
var define = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var name, deps, factory;
    // Parse the arguments for named or anonymous modules
    if ("string" === typeof args[0]) {
        name = args[0];
        deps = args[1];
        factory = args[2];
    }
    else {
        name = document.currentScript.src
            .replace(window.location.origin, "")
            .replace(/\.js$/, "");
        deps = args[0];
        factory = args[1];
    }
    // Run the module factory with all deps, and add to the cache
    // TypeScript AMD modules pass require and exports
    if ("require" === deps[0] && "exports" === deps[1]) {
        var moduleDeps_2 = deps.slice(2);
        var unmetDeps = [];
        var _loop_1 = function (dep) {
            dep = __MODULES__.resolveDep(dep, name);
            if (!__MODULES__.cache[dep] &&
                !Object.values(__MODULES__.pending).some(function (_a) {
                    var unmetDeps = _a.unmetDeps;
                    return unmetDeps.includes(dep);
                })) {
                unmetDeps.push(dep);
            }
        };
        for (var _a = 0, moduleDeps_1 = moduleDeps_2; _a < moduleDeps_1.length; _a++) {
            var dep = moduleDeps_1[_a];
            _loop_1(dep);
        }
        var load = function () {
            var e = {};
            var r = function (dep) { return require(__MODULES__.resolveDep(dep, name)); };
            factory.call.apply(factory, __spreadArray([_this, r, e], moduleDeps_2.map(r), false));
            __MODULES__.cache[name] = e;
        };
        if (unmetDeps.length) {
            __MODULES__.pending[name] = { unmetDeps: unmetDeps, load: load };
            for (var _b = 0, unmetDeps_1 = unmetDeps; _b < unmetDeps_1.length; _b++) {
                var dep = unmetDeps_1[_b];
                var dynamicScript = document.createElement("script");
                dynamicScript.src = dep + ".js";
                document.body.appendChild(dynamicScript);
            }
        }
        else {
            load();
        }
    }
    else {
        __MODULES__.cache[name] = factory.call.apply(factory, __spreadArray([_this], deps.map(require), false));
    }
};
define.amd = true; // lol no it's not, but pretend we are AMD/RequireJS
//# sourceMappingURL=data:application/json;base64,