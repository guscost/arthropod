var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _this = this;
// Custom AMD-like loader, does not support circular dependencies
var __MODULES__ = {
    cache: {},
    pending: {},
    get: function (name) { return __MODULES__.cache[name]; },
    set: function (name, value) { return (__MODULES__.cache[name] = value); },
    resolve: function (name, from) {
        if (/^\.\.?\//.test(name)) {
            var absolutePath = from.split("/").slice(0, -1);
            var relativeDep = name.split("/");
            while (relativeDep[0] === "..") {
                relativeDep.shift();
                absolutePath.pop();
            }
            while (relativeDep[0] === ".") {
                relativeDep.shift();
            }
            name = __spreadArray(__spreadArray([], absolutePath, true), relativeDep, true).join("/");
        }
        else {
            name = name.replace(/^@?\//, "/js/");
        }
        return name;
    },
    refresh: function () {
        for (var _i = 0, _a = Object.entries(__MODULES__.pending); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], _c = _b[1], unmetDeps = _c.unmetDeps, load = _c.load;
            if (unmetDeps.every(function (name) { return name in __MODULES__.cache; })) {
                delete __MODULES__.pending[key];
                load();
            }
        }
    },
};
var define = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var name, deps, factory;
    // Webpack AMD modules are named, TypeScript AMD modules are not
    if ("string" === typeof args[0]) {
        name = args[0];
        deps = args[1];
        factory = args[2];
    }
    else {
        name = document.currentScript.src
            .replace(window.location.origin, "")
            .replace(/\.js$/, "");
        deps = args[0];
        factory = args[1];
    }
    // TypeScript AMD modules pass in require and exports
    if ("require" === deps[0] && "exports" === deps[1]) {
        deps = deps.slice(2);
        var load = function () {
            var require = function (dep) {
                return __MODULES__.get(__MODULES__.resolve(dep, name));
            };
            var exports = {};
            factory.call.apply(factory, __spreadArray([_this, require, exports], deps.map(require), false));
            __MODULES__.set(name, exports);
            __MODULES__.refresh();
        };
        var unmetDeps = [];
        for (var _a = 0, deps_1 = deps; _a < deps_1.length; _a++) {
            var dep = deps_1[_a];
            dep = __MODULES__.resolve(dep, name);
            !__MODULES__.get(dep) && unmetDeps.push(dep);
        }
        var _loop_1 = function (dep) {
            if (!Object.values(__MODULES__.pending).some(function (_a) {
                var unmetDeps = _a.unmetDeps;
                return unmetDeps.includes(dep);
            })) {
                var dynamicScript = document.createElement("script");
                dynamicScript.src = dep + ".js";
                document.body.appendChild(dynamicScript);
            }
        };
        for (var _b = 0, unmetDeps_1 = unmetDeps; _b < unmetDeps_1.length; _b++) {
            var dep = unmetDeps_1[_b];
            _loop_1(dep);
        }
        __MODULES__.pending[name] = { unmetDeps: unmetDeps, load: load };
        __MODULES__.refresh();
    }
    else {
        // Webpack UMDs do not load dynamically, add these script tags in order
        __MODULES__.set(name, factory.call.apply(factory, __spreadArray([_this], deps.map(__MODULES__.get), false)));
    }
};
define.amd = true; // lol no it's not, but pretend we are AMD/RequireJS
//# sourceMappingURL=data:application/json;base64,