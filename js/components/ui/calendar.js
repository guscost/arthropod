define(["require", "exports", "react/jsx-runtime", "react", "lucide-react", "react-day-picker", "@/lib/utils", "@/components/ui/button"], function (require, exports, jsx_runtime_1, React, lucide_react_1, react_day_picker_1, utils_1, button_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Calendar = Calendar;
    exports.CalendarDayButton = CalendarDayButton;
    function Calendar({ className, classNames, showOutsideDays = true, captionLayout = "label", buttonVariant = "ghost", formatters, components, ...props }) {
        const defaultClassNames = (0, react_day_picker_1.getDefaultClassNames)();
        return ((0, jsx_runtime_1.jsx)(react_day_picker_1.DayPicker, { showOutsideDays: showOutsideDays, className: (0, utils_1.cn)("bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent", String.raw `rtl:**:[.rdp-button\_next>svg]:rotate-180`, String.raw `rtl:**:[.rdp-button\_previous>svg]:rotate-180`, className), captionLayout: captionLayout, formatters: {
                formatMonthDropdown: (date) => date.toLocaleString("default", { month: "short" }),
                ...formatters,
            }, classNames: {
                root: (0, utils_1.cn)("w-fit", defaultClassNames.root),
                months: (0, utils_1.cn)("flex gap-4 flex-col md:flex-row relative", defaultClassNames.months),
                month: (0, utils_1.cn)("flex flex-col w-full gap-4", defaultClassNames.month),
                nav: (0, utils_1.cn)("flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between", defaultClassNames.nav),
                button_previous: (0, utils_1.cn)((0, button_1.buttonVariants)({ variant: buttonVariant }), "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none", defaultClassNames.button_previous),
                button_next: (0, utils_1.cn)((0, button_1.buttonVariants)({ variant: buttonVariant }), "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none", defaultClassNames.button_next),
                month_caption: (0, utils_1.cn)("flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)", defaultClassNames.month_caption),
                dropdowns: (0, utils_1.cn)("w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5", defaultClassNames.dropdowns),
                dropdown_root: (0, utils_1.cn)("relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md", defaultClassNames.dropdown_root),
                dropdown: (0, utils_1.cn)("absolute bg-background inset-0 opacity-0", defaultClassNames.dropdown),
                caption_label: (0, utils_1.cn)("select-none font-medium", captionLayout === "label"
                    ? "text-sm"
                    : "rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5", defaultClassNames.caption_label),
                table: "w-full border-collapse",
                weekdays: (0, utils_1.cn)("flex", defaultClassNames.weekdays),
                weekday: (0, utils_1.cn)("text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none", defaultClassNames.weekday),
                week: (0, utils_1.cn)("flex w-full mt-2", defaultClassNames.week),
                week_number_header: (0, utils_1.cn)("select-none w-(--cell-size)", defaultClassNames.week_number_header),
                week_number: (0, utils_1.cn)("text-[0.8rem] select-none text-muted-foreground", defaultClassNames.week_number),
                day: (0, utils_1.cn)("relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none", defaultClassNames.day),
                range_start: (0, utils_1.cn)("rounded-l-md bg-accent", defaultClassNames.range_start),
                range_middle: (0, utils_1.cn)("rounded-none", defaultClassNames.range_middle),
                range_end: (0, utils_1.cn)("rounded-r-md bg-accent", defaultClassNames.range_end),
                today: (0, utils_1.cn)("bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none", defaultClassNames.today),
                outside: (0, utils_1.cn)("text-muted-foreground aria-selected:text-muted-foreground", defaultClassNames.outside),
                disabled: (0, utils_1.cn)("text-muted-foreground opacity-50", defaultClassNames.disabled),
                hidden: (0, utils_1.cn)("invisible", defaultClassNames.hidden),
                ...classNames,
            }, components: {
                Root: ({ className, rootRef, ...props }) => {
                    return ((0, jsx_runtime_1.jsx)("div", { "data-slot": "calendar", ref: rootRef, className: (0, utils_1.cn)(className), ...props }));
                },
                Chevron: ({ className, orientation, ...props }) => {
                    if (orientation === "left") {
                        return ((0, jsx_runtime_1.jsx)(lucide_react_1.ChevronLeftIcon, { className: (0, utils_1.cn)("size-4", className), ...props }));
                    }
                    if (orientation === "right") {
                        return ((0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRightIcon, { className: (0, utils_1.cn)("size-4", className), ...props }));
                    }
                    return ((0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDownIcon, { className: (0, utils_1.cn)("size-4", className), ...props }));
                },
                DayButton: CalendarDayButton,
                WeekNumber: ({ children, ...props }) => {
                    return ((0, jsx_runtime_1.jsx)("td", { ...props, children: (0, jsx_runtime_1.jsx)("div", { className: "flex size-(--cell-size) items-center justify-center text-center", children: children }) }));
                },
                ...components,
            }, ...props }));
    }
    function CalendarDayButton({ className, day, modifiers, ...props }) {
        const defaultClassNames = (0, react_day_picker_1.getDefaultClassNames)();
        const ref = React.useRef(null);
        React.useEffect(() => {
            var _a;
            if (modifiers.focused)
                (_a = ref.current) === null || _a === void 0 ? void 0 : _a.focus();
        }, [modifiers.focused]);
        return ((0, jsx_runtime_1.jsx)(button_1.Button, { ref: ref, variant: "ghost", size: "icon", "data-day": day.date.toLocaleDateString(), "data-selected-single": modifiers.selected &&
                !modifiers.range_start &&
                !modifiers.range_end &&
                !modifiers.range_middle, "data-range-start": modifiers.range_start, "data-range-end": modifiers.range_end, "data-range-middle": modifiers.range_middle, className: (0, utils_1.cn)("data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70", defaultClassNames.day, className), ...props }));
    }
});
//# sourceMappingURL=data:application/json;base64,