define(["require", "exports", "react/jsx-runtime", "react", "@radix-ui/react-toggle-group", "@/lib/utils", "@/components/ui/toggle"], function (require, exports, jsx_runtime_1, React, ToggleGroupPrimitive, utils_1, toggle_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToggleGroupItem = exports.ToggleGroup = void 0;
    const ToggleGroupContext = React.createContext({
        size: "default",
        variant: "default",
    });
    const ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => ((0, jsx_runtime_1.jsx)(ToggleGroupPrimitive.Root, { ref: ref, className: (0, utils_1.cn)("flex items-center justify-center gap-1", className), ...props, children: (0, jsx_runtime_1.jsx)(ToggleGroupContext.Provider, { value: { variant, size }, children: children }) })));
    exports.ToggleGroup = ToggleGroup;
    ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;
    const ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {
        const context = React.useContext(ToggleGroupContext);
        return ((0, jsx_runtime_1.jsx)(ToggleGroupPrimitive.Item, { ref: ref, className: (0, utils_1.cn)((0, toggle_1.toggleVariants)({
                variant: context.variant || variant,
                size: context.size || size,
            }), className), ...props, children: children }));
    });
    exports.ToggleGroupItem = ToggleGroupItem;
    ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLWdyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdWkvdG9nZ2xlLWdyb3VwLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0lBQUEsWUFBWSxDQUFDOzs7O0lBU2IsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUU1QztRQUNBLElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFLFNBQVM7S0FDbkIsQ0FBQyxDQUFDO0lBRUgsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FJbEMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FDM0QsdUJBQUMsb0JBQW9CLENBQUMsSUFBSSxJQUN4QixHQUFHLEVBQUUsR0FBRyxFQUNSLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFBQyx3Q0FBd0MsRUFBRSxTQUFTLENBQUMsS0FDOUQsS0FBSyxZQUVULHVCQUFDLGtCQUFrQixDQUFDLFFBQVEsSUFBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFlBQ2xELFFBQVEsR0FDbUIsR0FDSixDQUM3QixDQUFDLENBQUM7SUE4Qk0sa0NBQVc7SUE1QnBCLFdBQVcsQ0FBQyxXQUFXLEdBQUcsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUVoRSxNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUl0QyxDQUFDLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDMUQsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRXJELE9BQU8sQ0FDTCx1QkFBQyxvQkFBb0IsQ0FBQyxJQUFJLElBQ3hCLEdBQUcsRUFBRSxHQUFHLEVBQ1IsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUNYLElBQUEsdUJBQWMsRUFBQztnQkFDYixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPO2dCQUNuQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJO2FBQzNCLENBQUMsRUFDRixTQUFTLENBQ1YsS0FDRyxLQUFLLFlBRVIsUUFBUSxHQUNpQixDQUM3QixDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFJbUIsMENBQWU7SUFGckMsZUFBZSxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgVG9nZ2xlR3JvdXBQcmltaXRpdmUgZnJvbSBcIkByYWRpeC11aS9yZWFjdC10b2dnbGUtZ3JvdXBcIjtcbmltcG9ydCB7IHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSBcImNsYXNzLXZhcmlhbmNlLWF1dGhvcml0eVwiO1xuXG5pbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiO1xuaW1wb3J0IHsgdG9nZ2xlVmFyaWFudHMgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3RvZ2dsZVwiO1xuXG5jb25zdCBUb2dnbGVHcm91cENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PFxuICBWYXJpYW50UHJvcHM8dHlwZW9mIHRvZ2dsZVZhcmlhbnRzPlxuPih7XG4gIHNpemU6IFwiZGVmYXVsdFwiLFxuICB2YXJpYW50OiBcImRlZmF1bHRcIixcbn0pO1xuXG5jb25zdCBUb2dnbGVHcm91cCA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFRvZ2dsZUdyb3VwUHJpbWl0aXZlLlJvb3Q+LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIFRvZ2dsZUdyb3VwUHJpbWl0aXZlLlJvb3Q+ICZcbiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIHRvZ2dsZVZhcmlhbnRzPlxuPigoeyBjbGFzc05hbWUsIHZhcmlhbnQsIHNpemUsIGNoaWxkcmVuLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgPFRvZ2dsZUdyb3VwUHJpbWl0aXZlLlJvb3RcbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgZ2FwLTFcIiwgY2xhc3NOYW1lKX1cbiAgICB7Li4ucHJvcHN9XG4gID5cbiAgICA8VG9nZ2xlR3JvdXBDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IHZhcmlhbnQsIHNpemUgfX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9Ub2dnbGVHcm91cENvbnRleHQuUHJvdmlkZXI+XG4gIDwvVG9nZ2xlR3JvdXBQcmltaXRpdmUuUm9vdD5cbikpO1xuXG5Ub2dnbGVHcm91cC5kaXNwbGF5TmFtZSA9IFRvZ2dsZUdyb3VwUHJpbWl0aXZlLlJvb3QuZGlzcGxheU5hbWU7XG5cbmNvbnN0IFRvZ2dsZUdyb3VwSXRlbSA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFRvZ2dsZUdyb3VwUHJpbWl0aXZlLkl0ZW0+LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIFRvZ2dsZUdyb3VwUHJpbWl0aXZlLkl0ZW0+ICZcbiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIHRvZ2dsZVZhcmlhbnRzPlxuPigoeyBjbGFzc05hbWUsIGNoaWxkcmVuLCB2YXJpYW50LCBzaXplLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVG9nZ2xlR3JvdXBDb250ZXh0KTtcblxuICByZXR1cm4gKFxuICAgIDxUb2dnbGVHcm91cFByaW1pdGl2ZS5JdGVtXG4gICAgICByZWY9e3JlZn1cbiAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgIHRvZ2dsZVZhcmlhbnRzKHtcbiAgICAgICAgICB2YXJpYW50OiBjb250ZXh0LnZhcmlhbnQgfHwgdmFyaWFudCxcbiAgICAgICAgICBzaXplOiBjb250ZXh0LnNpemUgfHwgc2l6ZSxcbiAgICAgICAgfSksXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVG9nZ2xlR3JvdXBQcmltaXRpdmUuSXRlbT5cbiAgKTtcbn0pO1xuXG5Ub2dnbGVHcm91cEl0ZW0uZGlzcGxheU5hbWUgPSBUb2dnbGVHcm91cFByaW1pdGl2ZS5JdGVtLmRpc3BsYXlOYW1lO1xuXG5leHBvcnQgeyBUb2dnbGVHcm91cCwgVG9nZ2xlR3JvdXBJdGVtIH07XG4iXX0=