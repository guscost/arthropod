define(["require", "exports", "react/jsx-runtime", "@radix-ui/react-dialog", "lucide-react", "@/lib/utils"], function (require, exports, jsx_runtime_1, DialogPrimitive, lucide_react_1, utils_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Dialog = Dialog;
    exports.DialogClose = DialogClose;
    exports.DialogContent = DialogContent;
    exports.DialogDescription = DialogDescription;
    exports.DialogFooter = DialogFooter;
    exports.DialogHeader = DialogHeader;
    exports.DialogOverlay = DialogOverlay;
    exports.DialogPortal = DialogPortal;
    exports.DialogTitle = DialogTitle;
    exports.DialogTrigger = DialogTrigger;
    function Dialog({ ...props }) {
        return (0, jsx_runtime_1.jsx)(DialogPrimitive.Root, { "data-slot": "dialog", ...props });
    }
    function DialogTrigger({ ...props }) {
        return (0, jsx_runtime_1.jsx)(DialogPrimitive.Trigger, { "data-slot": "dialog-trigger", ...props });
    }
    function DialogPortal({ ...props }) {
        return (0, jsx_runtime_1.jsx)(DialogPrimitive.Portal, { "data-slot": "dialog-portal", ...props });
    }
    function DialogClose({ ...props }) {
        return (0, jsx_runtime_1.jsx)(DialogPrimitive.Close, { "data-slot": "dialog-close", ...props });
    }
    function DialogOverlay({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(DialogPrimitive.Overlay, { "data-slot": "dialog-overlay", className: (0, utils_1.cn)("data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50", className), ...props }));
    }
    function DialogContent({ className, children, showCloseButton = true, ...props }) {
        return ((0, jsx_runtime_1.jsxs)(DialogPortal, { "data-slot": "dialog-portal", children: [(0, jsx_runtime_1.jsx)(DialogOverlay, {}), (0, jsx_runtime_1.jsxs)(DialogPrimitive.Content, { "data-slot": "dialog-content", className: (0, utils_1.cn)("bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg", className), ...props, children: [children, showCloseButton && ((0, jsx_runtime_1.jsxs)(DialogPrimitive.Close, { "data-slot": "dialog-close", className: "ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.XIcon, {}), (0, jsx_runtime_1.jsx)("span", { className: "sr-only", children: "Close" })] }))] })] }));
    }
    function DialogHeader({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)("div", { "data-slot": "dialog-header", className: (0, utils_1.cn)("flex flex-col gap-2 text-center sm:text-left", className), ...props }));
    }
    function DialogFooter({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)("div", { "data-slot": "dialog-footer", className: (0, utils_1.cn)("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end", className), ...props }));
    }
    function DialogTitle({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(DialogPrimitive.Title, { "data-slot": "dialog-title", className: (0, utils_1.cn)("text-lg leading-none font-semibold", className), ...props }));
    }
    function DialogDescription({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(DialogPrimitive.Description, { "data-slot": "dialog-description", className: (0, utils_1.cn)("text-muted-foreground text-sm", className), ...props }));
    }
});
//# sourceMappingURL=data:application/json;base64,