define(["require", "exports", "react/jsx-runtime", "react", "@radix-ui/react-slot", "react-hook-form", "@/lib/utils", "@/components/ui/label"], function (require, exports, jsx_runtime_1, React, react_slot_1, react_hook_form_1, utils_1, label_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FormField = exports.FormMessage = exports.FormDescription = exports.FormControl = exports.FormLabel = exports.FormItem = exports.Form = exports.useFormField = void 0;
    const Form = react_hook_form_1.FormProvider;
    exports.Form = Form;
    const FormFieldContext = React.createContext({});
    const FormField = ({ ...props }) => {
        return ((0, jsx_runtime_1.jsx)(FormFieldContext.Provider, { value: { name: props.name }, children: (0, jsx_runtime_1.jsx)(react_hook_form_1.Controller, { ...props }) }));
    };
    exports.FormField = FormField;
    const useFormField = () => {
        const fieldContext = React.useContext(FormFieldContext);
        const itemContext = React.useContext(FormItemContext);
        const { getFieldState, formState } = (0, react_hook_form_1.useFormContext)();
        const fieldState = getFieldState(fieldContext.name, formState);
        if (!fieldContext) {
            throw new Error("useFormField should be used within <FormField>");
        }
        const { id } = itemContext;
        return {
            id,
            name: fieldContext.name,
            formItemId: `${id}-form-item`,
            formDescriptionId: `${id}-form-item-description`,
            formMessageId: `${id}-form-item-message`,
            ...fieldState,
        };
    };
    exports.useFormField = useFormField;
    const FormItemContext = React.createContext({});
    const FormItem = React.forwardRef(({ className, ...props }, ref) => {
        const id = React.useId();
        return ((0, jsx_runtime_1.jsx)(FormItemContext.Provider, { value: { id }, children: (0, jsx_runtime_1.jsx)("div", { ref: ref, className: (0, utils_1.cn)("space-y-2", className), ...props }) }));
    });
    exports.FormItem = FormItem;
    FormItem.displayName = "FormItem";
    const FormLabel = React.forwardRef(({ className, ...props }, ref) => {
        const { error, formItemId } = useFormField();
        return ((0, jsx_runtime_1.jsx)(label_1.Label, { ref: ref, className: (0, utils_1.cn)(error && "text-destructive", className), htmlFor: formItemId, ...props }));
    });
    exports.FormLabel = FormLabel;
    FormLabel.displayName = "FormLabel";
    const FormControl = React.forwardRef(({ ...props }, ref) => {
        const { error, formItemId, formDescriptionId, formMessageId } = useFormField();
        return ((0, jsx_runtime_1.jsx)(react_slot_1.Slot, { ref: ref, id: formItemId, "aria-describedby": !error
                ? `${formDescriptionId}`
                : `${formDescriptionId} ${formMessageId}`, "aria-invalid": !!error, ...props }));
    });
    exports.FormControl = FormControl;
    FormControl.displayName = "FormControl";
    const FormDescription = React.forwardRef(({ className, ...props }, ref) => {
        const { formDescriptionId } = useFormField();
        return ((0, jsx_runtime_1.jsx)("p", { ref: ref, id: formDescriptionId, className: (0, utils_1.cn)("text-[0.8rem] text-muted-foreground", className), ...props }));
    });
    exports.FormDescription = FormDescription;
    FormDescription.displayName = "FormDescription";
    const FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {
        const { error, formMessageId } = useFormField();
        const body = error ? String(error === null || error === void 0 ? void 0 : error.message) : children;
        if (!body) {
            return null;
        }
        return ((0, jsx_runtime_1.jsx)("p", { ref: ref, id: formMessageId, className: (0, utils_1.cn)("text-[0.8rem] font-medium text-destructive", className), ...props, children: body }));
    });
    exports.FormMessage = FormMessage;
    FormMessage.displayName = "FormMessage";
});
//# sourceMappingURL=data:application/json;base64,