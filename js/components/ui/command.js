define(["require", "exports", "react/jsx-runtime", "cmdk", "lucide-react", "@/lib/utils", "@/components/ui/dialog"], function (require, exports, jsx_runtime_1, cmdk_1, lucide_react_1, utils_1, dialog_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Command = Command;
    exports.CommandDialog = CommandDialog;
    exports.CommandInput = CommandInput;
    exports.CommandList = CommandList;
    exports.CommandEmpty = CommandEmpty;
    exports.CommandGroup = CommandGroup;
    exports.CommandItem = CommandItem;
    exports.CommandShortcut = CommandShortcut;
    exports.CommandSeparator = CommandSeparator;
    function Command({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command, { "data-slot": "command", className: (0, utils_1.cn)("bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md", className), ...props }));
    }
    function CommandDialog({ title = "Command Palette", description = "Search for a command to run...", children, className, showCloseButton = true, ...props }) {
        return ((0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { ...props, children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { className: "sr-only", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: title }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: description })] }), (0, jsx_runtime_1.jsx)(dialog_1.DialogContent, { className: (0, utils_1.cn)("overflow-hidden p-0", className), showCloseButton: showCloseButton, children: (0, jsx_runtime_1.jsx)(Command, { className: "[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5", children: children }) })] }));
    }
    function CommandInput({ className, ...props }) {
        return ((0, jsx_runtime_1.jsxs)("div", { "data-slot": "command-input-wrapper", className: "flex h-9 items-center gap-2 border-b px-3", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.SearchIcon, { className: "size-4 shrink-0 opacity-50" }), (0, jsx_runtime_1.jsx)(cmdk_1.Command.Input, { "data-slot": "command-input", className: (0, utils_1.cn)("placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50", className), ...props })] }));
    }
    function CommandList({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command.List, { "data-slot": "command-list", className: (0, utils_1.cn)("max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto", className), ...props }));
    }
    function CommandEmpty({ ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command.Empty, { "data-slot": "command-empty", className: "py-6 text-center text-sm", ...props }));
    }
    function CommandGroup({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command.Group, { "data-slot": "command-group", className: (0, utils_1.cn)("text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium", className), ...props }));
    }
    function CommandSeparator({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command.Separator, { "data-slot": "command-separator", className: (0, utils_1.cn)("bg-border -mx-1 h-px", className), ...props }));
    }
    function CommandItem({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command.Item, { "data-slot": "command-item", className: (0, utils_1.cn)("data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4", className), ...props }));
    }
    function CommandShortcut({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)("span", { "data-slot": "command-shortcut", className: (0, utils_1.cn)("text-muted-foreground ml-auto text-xs tracking-widest", className), ...props }));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL2NvbW1hbmQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7SUFBQSxZQUFZLENBQUM7OztJQThLWCwwQkFBTztJQUNQLHNDQUFhO0lBQ2Isb0NBQVk7SUFDWixrQ0FBVztJQUNYLG9DQUFZO0lBQ1osb0NBQVk7SUFDWixrQ0FBVztJQUNYLDBDQUFlO0lBQ2YsNENBQWdCO0lBdktsQixTQUFTLE9BQU8sQ0FBQyxFQUNmLFNBQVMsRUFDVCxHQUFHLEtBQUssRUFDc0M7UUFDOUMsT0FBTyxDQUNMLHVCQUFDLGNBQWdCLGlCQUNMLFNBQVMsRUFDbkIsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUNYLDJGQUEyRixFQUMzRixTQUFTLENBQ1YsS0FDRyxLQUFLLEdBQ1QsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsYUFBYSxDQUFDLEVBQ3JCLEtBQUssR0FBRyxpQkFBaUIsRUFDekIsV0FBVyxHQUFHLGdDQUFnQyxFQUM5QyxRQUFRLEVBQ1IsU0FBUyxFQUNULGVBQWUsR0FBRyxJQUFJLEVBQ3RCLEdBQUcsS0FBSyxFQU1UO1FBQ0MsT0FBTyxDQUNMLHdCQUFDLGVBQU0sT0FBSyxLQUFLLGFBQ2Ysd0JBQUMscUJBQVksSUFBQyxTQUFTLEVBQUMsU0FBUyxhQUMvQix1QkFBQyxvQkFBVyxjQUFFLEtBQUssR0FBZSxFQUNsQyx1QkFBQywwQkFBaUIsY0FBRSxXQUFXLEdBQXFCLElBQ3ZDLEVBQ2YsdUJBQUMsc0JBQWEsSUFDWixTQUFTLEVBQUUsSUFBQSxVQUFFLEVBQUMscUJBQXFCLEVBQUUsU0FBUyxDQUFDLEVBQy9DLGVBQWUsRUFBRSxlQUFlLFlBRWhDLHVCQUFDLE9BQU8sSUFBQyxTQUFTLEVBQUMsdVpBQXVaLFlBQ3ZhLFFBQVEsR0FDRCxHQUNJLElBQ1QsQ0FDVixDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsWUFBWSxDQUFDLEVBQ3BCLFNBQVMsRUFDVCxHQUFHLEtBQUssRUFDNEM7UUFDcEQsT0FBTyxDQUNMLDhDQUNZLHVCQUF1QixFQUNqQyxTQUFTLEVBQUMsMkNBQTJDLGFBRXJELHVCQUFDLHlCQUFVLElBQUMsU0FBUyxFQUFDLDRCQUE0QixHQUFHLEVBQ3JELHVCQUFDLGNBQWdCLENBQUMsS0FBSyxpQkFDWCxlQUFlLEVBQ3pCLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFDWCwwSkFBMEosRUFDMUosU0FBUyxDQUNWLEtBQ0csS0FBSyxHQUNULElBQ0UsQ0FDUCxDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsV0FBVyxDQUFDLEVBQ25CLFNBQVMsRUFDVCxHQUFHLEtBQUssRUFDMkM7UUFDbkQsT0FBTyxDQUNMLHVCQUFDLGNBQWdCLENBQUMsSUFBSSxpQkFDVixjQUFjLEVBQ3hCLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFDWCw2REFBNkQsRUFDN0QsU0FBUyxDQUNWLEtBQ0csS0FBSyxHQUNULENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxTQUFTLFlBQVksQ0FBQyxFQUNwQixHQUFHLEtBQUssRUFDNEM7UUFDcEQsT0FBTyxDQUNMLHVCQUFDLGNBQWdCLENBQUMsS0FBSyxpQkFDWCxlQUFlLEVBQ3pCLFNBQVMsRUFBQywwQkFBMEIsS0FDaEMsS0FBSyxHQUNULENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxTQUFTLFlBQVksQ0FBQyxFQUNwQixTQUFTLEVBQ1QsR0FBRyxLQUFLLEVBQzRDO1FBQ3BELE9BQU8sQ0FDTCx1QkFBQyxjQUFnQixDQUFDLEtBQUssaUJBQ1gsZUFBZSxFQUN6QixTQUFTLEVBQUUsSUFBQSxVQUFFLEVBQ1gsd05BQXdOLEVBQ3hOLFNBQVMsQ0FDVixLQUNHLEtBQUssR0FDVCxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxFQUN4QixTQUFTLEVBQ1QsR0FBRyxLQUFLLEVBQ2dEO1FBQ3hELE9BQU8sQ0FDTCx1QkFBQyxjQUFnQixDQUFDLFNBQVMsaUJBQ2YsbUJBQW1CLEVBQzdCLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFBQyxzQkFBc0IsRUFBRSxTQUFTLENBQUMsS0FDNUMsS0FBSyxHQUNULENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxTQUFTLFdBQVcsQ0FBQyxFQUNuQixTQUFTLEVBQ1QsR0FBRyxLQUFLLEVBQzJDO1FBQ25ELE9BQU8sQ0FDTCx1QkFBQyxjQUFnQixDQUFDLElBQUksaUJBQ1YsY0FBYyxFQUN4QixTQUFTLEVBQUUsSUFBQSxVQUFFLEVBQ1gscVlBQXFZLEVBQ3JZLFNBQVMsQ0FDVixLQUNHLEtBQUssR0FDVCxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxlQUFlLENBQUMsRUFDdkIsU0FBUyxFQUNULEdBQUcsS0FBSyxFQUNxQjtRQUM3QixPQUFPLENBQ0wsOENBQ1ksa0JBQWtCLEVBQzVCLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFDWCx1REFBdUQsRUFDdkQsU0FBUyxDQUNWLEtBQ0csS0FBSyxHQUNULENBQ0gsQ0FBQztJQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBDb21tYW5kIGFzIENvbW1hbmRQcmltaXRpdmUgfSBmcm9tIFwiY21ka1wiO1xyXG5pbXBvcnQgeyBTZWFyY2hJY29uIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xyXG5cclxuaW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIjtcclxuaW1wb3J0IHtcclxuICBEaWFsb2csXHJcbiAgRGlhbG9nQ29udGVudCxcclxuICBEaWFsb2dEZXNjcmlwdGlvbixcclxuICBEaWFsb2dIZWFkZXIsXHJcbiAgRGlhbG9nVGl0bGUsXHJcbn0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9kaWFsb2dcIjtcclxuXHJcbmZ1bmN0aW9uIENvbW1hbmQoe1xyXG4gIGNsYXNzTmFtZSxcclxuICAuLi5wcm9wc1xyXG59OiBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgQ29tbWFuZFByaW1pdGl2ZT4pIHtcclxuICByZXR1cm4gKFxyXG4gICAgPENvbW1hbmRQcmltaXRpdmVcclxuICAgICAgZGF0YS1zbG90PVwiY29tbWFuZFwiXHJcbiAgICAgIGNsYXNzTmFtZT17Y24oXHJcbiAgICAgICAgXCJiZy1wb3BvdmVyIHRleHQtcG9wb3Zlci1mb3JlZ3JvdW5kIGZsZXggaC1mdWxsIHctZnVsbCBmbGV4LWNvbCBvdmVyZmxvdy1oaWRkZW4gcm91bmRlZC1tZFwiLFxyXG4gICAgICAgIGNsYXNzTmFtZSxcclxuICAgICAgKX1cclxuICAgICAgey4uLnByb3BzfVxyXG4gICAgLz5cclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBDb21tYW5kRGlhbG9nKHtcclxuICB0aXRsZSA9IFwiQ29tbWFuZCBQYWxldHRlXCIsXHJcbiAgZGVzY3JpcHRpb24gPSBcIlNlYXJjaCBmb3IgYSBjb21tYW5kIHRvIHJ1bi4uLlwiLFxyXG4gIGNoaWxkcmVuLFxyXG4gIGNsYXNzTmFtZSxcclxuICBzaG93Q2xvc2VCdXR0b24gPSB0cnVlLFxyXG4gIC4uLnByb3BzXHJcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBEaWFsb2c+ICYge1xyXG4gIHRpdGxlPzogc3RyaW5nO1xyXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZztcclxuICBzaG93Q2xvc2VCdXR0b24/OiBib29sZWFuO1xyXG59KSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxEaWFsb2cgey4uLnByb3BzfT5cclxuICAgICAgPERpYWxvZ0hlYWRlciBjbGFzc05hbWU9XCJzci1vbmx5XCI+XHJcbiAgICAgICAgPERpYWxvZ1RpdGxlPnt0aXRsZX08L0RpYWxvZ1RpdGxlPlxyXG4gICAgICAgIDxEaWFsb2dEZXNjcmlwdGlvbj57ZGVzY3JpcHRpb259PC9EaWFsb2dEZXNjcmlwdGlvbj5cclxuICAgICAgPC9EaWFsb2dIZWFkZXI+XHJcbiAgICAgIDxEaWFsb2dDb250ZW50XHJcbiAgICAgICAgY2xhc3NOYW1lPXtjbihcIm92ZXJmbG93LWhpZGRlbiBwLTBcIiwgY2xhc3NOYW1lKX1cclxuICAgICAgICBzaG93Q2xvc2VCdXR0b249e3Nob3dDbG9zZUJ1dHRvbn1cclxuICAgICAgPlxyXG4gICAgICAgIDxDb21tYW5kIGNsYXNzTmFtZT1cIlsmX1tjbWRrLWdyb3VwLWhlYWRpbmddXTp0ZXh0LW11dGVkLWZvcmVncm91bmQgKio6ZGF0YS1bc2xvdD1jb21tYW5kLWlucHV0LXdyYXBwZXJdOmgtMTIgWyZfW2NtZGstZ3JvdXAtaGVhZGluZ11dOnB4LTIgWyZfW2NtZGstZ3JvdXAtaGVhZGluZ11dOmZvbnQtbWVkaXVtIFsmX1tjbWRrLWdyb3VwXV06cHgtMiBbJl9bY21kay1ncm91cF06bm90KFtoaWRkZW5dKV9+W2NtZGstZ3JvdXBdXTpwdC0wIFsmX1tjbWRrLWlucHV0LXdyYXBwZXJdX3N2Z106aC01IFsmX1tjbWRrLWlucHV0LXdyYXBwZXJdX3N2Z106dy01IFsmX1tjbWRrLWlucHV0XV06aC0xMiBbJl9bY21kay1pdGVtXV06cHgtMiBbJl9bY21kay1pdGVtXV06cHktMyBbJl9bY21kay1pdGVtXV9zdmddOmgtNSBbJl9bY21kay1pdGVtXV9zdmddOnctNVwiPlxyXG4gICAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICAgIDwvQ29tbWFuZD5cclxuICAgICAgPC9EaWFsb2dDb250ZW50PlxyXG4gICAgPC9EaWFsb2c+XHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gQ29tbWFuZElucHV0KHtcclxuICBjbGFzc05hbWUsXHJcbiAgLi4ucHJvcHNcclxufTogUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIENvbW1hbmRQcmltaXRpdmUuSW5wdXQ+KSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgZGF0YS1zbG90PVwiY29tbWFuZC1pbnB1dC13cmFwcGVyXCJcclxuICAgICAgY2xhc3NOYW1lPVwiZmxleCBoLTkgaXRlbXMtY2VudGVyIGdhcC0yIGJvcmRlci1iIHB4LTNcIlxyXG4gICAgPlxyXG4gICAgICA8U2VhcmNoSWNvbiBjbGFzc05hbWU9XCJzaXplLTQgc2hyaW5rLTAgb3BhY2l0eS01MFwiIC8+XHJcbiAgICAgIDxDb21tYW5kUHJpbWl0aXZlLklucHV0XHJcbiAgICAgICAgZGF0YS1zbG90PVwiY29tbWFuZC1pbnB1dFwiXHJcbiAgICAgICAgY2xhc3NOYW1lPXtjbihcclxuICAgICAgICAgIFwicGxhY2Vob2xkZXI6dGV4dC1tdXRlZC1mb3JlZ3JvdW5kIGZsZXggaC0xMCB3LWZ1bGwgcm91bmRlZC1tZCBiZy10cmFuc3BhcmVudCBweS0zIHRleHQtc20gb3V0bGluZS1oaWRkZW4gZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkIGRpc2FibGVkOm9wYWNpdHktNTBcIixcclxuICAgICAgICAgIGNsYXNzTmFtZSxcclxuICAgICAgICApfVxyXG4gICAgICAgIHsuLi5wcm9wc31cclxuICAgICAgLz5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIENvbW1hbmRMaXN0KHtcclxuICBjbGFzc05hbWUsXHJcbiAgLi4ucHJvcHNcclxufTogUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIENvbW1hbmRQcmltaXRpdmUuTGlzdD4pIHtcclxuICByZXR1cm4gKFxyXG4gICAgPENvbW1hbmRQcmltaXRpdmUuTGlzdFxyXG4gICAgICBkYXRhLXNsb3Q9XCJjb21tYW5kLWxpc3RcIlxyXG4gICAgICBjbGFzc05hbWU9e2NuKFxyXG4gICAgICAgIFwibWF4LWgtWzMwMHB4XSBzY3JvbGwtcHktMSBvdmVyZmxvdy14LWhpZGRlbiBvdmVyZmxvdy15LWF1dG9cIixcclxuICAgICAgICBjbGFzc05hbWUsXHJcbiAgICAgICl9XHJcbiAgICAgIHsuLi5wcm9wc31cclxuICAgIC8+XHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gQ29tbWFuZEVtcHR5KHtcclxuICAuLi5wcm9wc1xyXG59OiBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgQ29tbWFuZFByaW1pdGl2ZS5FbXB0eT4pIHtcclxuICByZXR1cm4gKFxyXG4gICAgPENvbW1hbmRQcmltaXRpdmUuRW1wdHlcclxuICAgICAgZGF0YS1zbG90PVwiY29tbWFuZC1lbXB0eVwiXHJcbiAgICAgIGNsYXNzTmFtZT1cInB5LTYgdGV4dC1jZW50ZXIgdGV4dC1zbVwiXHJcbiAgICAgIHsuLi5wcm9wc31cclxuICAgIC8+XHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gQ29tbWFuZEdyb3VwKHtcclxuICBjbGFzc05hbWUsXHJcbiAgLi4ucHJvcHNcclxufTogUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIENvbW1hbmRQcmltaXRpdmUuR3JvdXA+KSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxDb21tYW5kUHJpbWl0aXZlLkdyb3VwXHJcbiAgICAgIGRhdGEtc2xvdD1cImNvbW1hbmQtZ3JvdXBcIlxyXG4gICAgICBjbGFzc05hbWU9e2NuKFxyXG4gICAgICAgIFwidGV4dC1mb3JlZ3JvdW5kIFsmX1tjbWRrLWdyb3VwLWhlYWRpbmddXTp0ZXh0LW11dGVkLWZvcmVncm91bmQgb3ZlcmZsb3ctaGlkZGVuIHAtMSBbJl9bY21kay1ncm91cC1oZWFkaW5nXV06cHgtMiBbJl9bY21kay1ncm91cC1oZWFkaW5nXV06cHktMS41IFsmX1tjbWRrLWdyb3VwLWhlYWRpbmddXTp0ZXh0LXhzIFsmX1tjbWRrLWdyb3VwLWhlYWRpbmddXTpmb250LW1lZGl1bVwiLFxyXG4gICAgICAgIGNsYXNzTmFtZSxcclxuICAgICAgKX1cclxuICAgICAgey4uLnByb3BzfVxyXG4gICAgLz5cclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBDb21tYW5kU2VwYXJhdG9yKHtcclxuICBjbGFzc05hbWUsXHJcbiAgLi4ucHJvcHNcclxufTogUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIENvbW1hbmRQcmltaXRpdmUuU2VwYXJhdG9yPikge1xyXG4gIHJldHVybiAoXHJcbiAgICA8Q29tbWFuZFByaW1pdGl2ZS5TZXBhcmF0b3JcclxuICAgICAgZGF0YS1zbG90PVwiY29tbWFuZC1zZXBhcmF0b3JcIlxyXG4gICAgICBjbGFzc05hbWU9e2NuKFwiYmctYm9yZGVyIC1teC0xIGgtcHhcIiwgY2xhc3NOYW1lKX1cclxuICAgICAgey4uLnByb3BzfVxyXG4gICAgLz5cclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBDb21tYW5kSXRlbSh7XHJcbiAgY2xhc3NOYW1lLFxyXG4gIC4uLnByb3BzXHJcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBDb21tYW5kUHJpbWl0aXZlLkl0ZW0+KSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxDb21tYW5kUHJpbWl0aXZlLkl0ZW1cclxuICAgICAgZGF0YS1zbG90PVwiY29tbWFuZC1pdGVtXCJcclxuICAgICAgY2xhc3NOYW1lPXtjbihcclxuICAgICAgICBcImRhdGEtW3NlbGVjdGVkPXRydWVdOmJnLWFjY2VudCBkYXRhLVtzZWxlY3RlZD10cnVlXTp0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kIFsmX3N2Zzpub3QoW2NsYXNzKj0ndGV4dC0nXSldOnRleHQtbXV0ZWQtZm9yZWdyb3VuZCByZWxhdGl2ZSBmbGV4IGN1cnNvci1kZWZhdWx0IGl0ZW1zLWNlbnRlciBnYXAtMiByb3VuZGVkLXNtIHB4LTIgcHktMS41IHRleHQtc20gb3V0bGluZS1oaWRkZW4gc2VsZWN0LW5vbmUgZGF0YS1bZGlzYWJsZWQ9dHJ1ZV06cG9pbnRlci1ldmVudHMtbm9uZSBkYXRhLVtkaXNhYmxlZD10cnVlXTpvcGFjaXR5LTUwIFsmX3N2Z106cG9pbnRlci1ldmVudHMtbm9uZSBbJl9zdmddOnNocmluay0wIFsmX3N2Zzpub3QoW2NsYXNzKj0nc2l6ZS0nXSldOnNpemUtNFwiLFxyXG4gICAgICAgIGNsYXNzTmFtZSxcclxuICAgICAgKX1cclxuICAgICAgey4uLnByb3BzfVxyXG4gICAgLz5cclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBDb21tYW5kU2hvcnRjdXQoe1xyXG4gIGNsYXNzTmFtZSxcclxuICAuLi5wcm9wc1xyXG59OiBSZWFjdC5Db21wb25lbnRQcm9wczxcInNwYW5cIj4pIHtcclxuICByZXR1cm4gKFxyXG4gICAgPHNwYW5cclxuICAgICAgZGF0YS1zbG90PVwiY29tbWFuZC1zaG9ydGN1dFwiXHJcbiAgICAgIGNsYXNzTmFtZT17Y24oXHJcbiAgICAgICAgXCJ0ZXh0LW11dGVkLWZvcmVncm91bmQgbWwtYXV0byB0ZXh0LXhzIHRyYWNraW5nLXdpZGVzdFwiLFxyXG4gICAgICAgIGNsYXNzTmFtZSxcclxuICAgICAgKX1cclxuICAgICAgey4uLnByb3BzfVxyXG4gICAgLz5cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gIENvbW1hbmQsXHJcbiAgQ29tbWFuZERpYWxvZyxcclxuICBDb21tYW5kSW5wdXQsXHJcbiAgQ29tbWFuZExpc3QsXHJcbiAgQ29tbWFuZEVtcHR5LFxyXG4gIENvbW1hbmRHcm91cCxcclxuICBDb21tYW5kSXRlbSxcclxuICBDb21tYW5kU2hvcnRjdXQsXHJcbiAgQ29tbWFuZFNlcGFyYXRvcixcclxufTtcclxuIl19