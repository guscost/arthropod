define(["require", "exports", "react/jsx-runtime", "@/components/ui/avatar", "@/components/ui/button", "@/components/ui/card", "@/components/ui/input", "@/components/ui/label", "@/components/ui/select", "@/components/ui/separator"], function (require, exports, jsx_runtime_1, avatar_1, button_1, card_1, input_1, label_1, select_1, separator_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CardsShare = CardsShare;
    const people = [
        {
            name: "Olivia Martin",
            email: "m@example.com",
            avatar: "/avatars/03.png",
        },
        {
            name: "Isabella Nguyen",
            email: "b@example.com",
            avatar: "/avatars/04.png",
        },
        {
            name: "Sofia Davis",
            email: "p@example.com",
            avatar: "/avatars/05.png",
        },
        {
            name: "Ethan Thompson",
            email: "e@example.com",
            avatar: "/avatars/01.png",
        },
    ];
    function CardsShare() {
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { children: "Share this document" }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: "Anyone with the link can view this document." })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "link", className: "sr-only", children: "Link" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "link", value: "http://example.com/link/to/document", className: "h-8", readOnly: true }), (0, jsx_runtime_1.jsx)(button_1.Button, { size: "sm", variant: "outline", className: "shadow-none", children: "Copy Link" })] }), (0, jsx_runtime_1.jsx)(separator_1.Separator, { className: "my-4" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col gap-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-sm font-medium", children: "People with access" }), (0, jsx_runtime_1.jsx)("div", { className: "grid gap-6", children: people.map((person) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-4", children: [(0, jsx_runtime_1.jsxs)(avatar_1.Avatar, { children: [(0, jsx_runtime_1.jsx)(avatar_1.AvatarImage, { src: person.avatar, alt: "Image" }), (0, jsx_runtime_1.jsx)(avatar_1.AvatarFallback, { children: person.name.charAt(0) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm leading-none font-medium", children: person.name }), (0, jsx_runtime_1.jsx)("p", { className: "text-muted-foreground text-sm", children: person.email })] })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { defaultValue: "edit", children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: "ml-auto pr-2", "aria-label": "Edit", size: "sm", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { align: "end", children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "edit", children: "Can edit" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "view", children: "Can view" })] })] })] }, person.email))) })] })] })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9kZW1vLWNhcmRzL3NoYXJlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0lBQUEsWUFBWSxDQUFDOzs7SUE0Q2IsZ0NBbUVDO0lBekZELE1BQU0sTUFBTSxHQUFHO1FBQ2I7WUFDRSxJQUFJLEVBQUUsZUFBZTtZQUNyQixLQUFLLEVBQUUsZUFBZTtZQUN0QixNQUFNLEVBQUUsaUJBQWlCO1NBQzFCO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsaUJBQWlCO1lBQ3ZCLEtBQUssRUFBRSxlQUFlO1lBQ3RCLE1BQU0sRUFBRSxpQkFBaUI7U0FDMUI7UUFDRDtZQUNFLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUssRUFBRSxlQUFlO1lBQ3RCLE1BQU0sRUFBRSxpQkFBaUI7U0FDMUI7UUFDRDtZQUNFLElBQUksRUFBRSxnQkFBZ0I7WUFDdEIsS0FBSyxFQUFFLGVBQWU7WUFDdEIsTUFBTSxFQUFFLGlCQUFpQjtTQUMxQjtLQUNGLENBQUM7SUFDRixTQUFnQixVQUFVO1FBQ3hCLE9BQU8sQ0FDTCx3QkFBQyxXQUFJLGVBQ0gsd0JBQUMsaUJBQVUsZUFDVCx1QkFBQyxnQkFBUyxzQ0FBZ0MsRUFDMUMsdUJBQUMsc0JBQWUsK0RBRUUsSUFDUCxFQUNiLHdCQUFDLGtCQUFXLGVBQ1YsaUNBQUssU0FBUyxFQUFDLHlCQUF5QixhQUN0Qyx1QkFBQyxhQUFLLElBQUMsT0FBTyxFQUFDLE1BQU0sRUFBQyxTQUFTLEVBQUMsU0FBUyxxQkFFakMsRUFDUix1QkFBQyxhQUFLLElBQ0osRUFBRSxFQUFDLE1BQU0sRUFDVCxLQUFLLEVBQUMscUNBQXFDLEVBQzNDLFNBQVMsRUFBQyxLQUFLLEVBQ2YsUUFBUSxTQUNSLEVBQ0YsdUJBQUMsZUFBTSxJQUFDLElBQUksRUFBQyxJQUFJLEVBQUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxTQUFTLEVBQUMsYUFBYSwwQkFFbEQsSUFDTCxFQUNOLHVCQUFDLHFCQUFTLElBQUMsU0FBUyxFQUFDLE1BQU0sR0FBRyxFQUM5QixpQ0FBSyxTQUFTLEVBQUMscUJBQXFCLGFBQ2xDLGdDQUFLLFNBQVMsRUFBQyxxQkFBcUIsbUNBQXlCLEVBQzdELGdDQUFLLFNBQVMsRUFBQyxZQUFZLFlBQ3hCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQ3RCLGlDQUVFLFNBQVMsRUFBQyx5Q0FBeUMsYUFFbkQsaUNBQUssU0FBUyxFQUFDLHlCQUF5QixhQUN0Qyx3QkFBQyxlQUFNLGVBQ0wsdUJBQUMsb0JBQVcsSUFBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUMsT0FBTyxHQUFHLEVBQy9DLHVCQUFDLHVCQUFjLGNBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQWtCLElBQ2pELEVBQ1QsNENBQ0UsOEJBQUcsU0FBUyxFQUFDLGtDQUFrQyxZQUM1QyxNQUFNLENBQUMsSUFBSSxHQUNWLEVBQ0osOEJBQUcsU0FBUyxFQUFDLCtCQUErQixZQUN6QyxNQUFNLENBQUMsS0FBSyxHQUNYLElBQ0EsSUFDRixFQUNOLHdCQUFDLGVBQU0sSUFBQyxZQUFZLEVBQUMsTUFBTSxhQUN6Qix1QkFBQyxzQkFBYSxJQUNaLFNBQVMsRUFBQyxjQUFjLGdCQUNiLE1BQU0sRUFDakIsSUFBSSxFQUFDLElBQUksWUFFVCx1QkFBQyxvQkFBVyxJQUFDLFdBQVcsRUFBQyxRQUFRLEdBQUcsR0FDdEIsRUFDaEIsd0JBQUMsc0JBQWEsSUFBQyxLQUFLLEVBQUMsS0FBSyxhQUN4Qix1QkFBQyxtQkFBVSxJQUFDLEtBQUssRUFBQyxNQUFNLHlCQUFzQixFQUM5Qyx1QkFBQyxtQkFBVSxJQUFDLEtBQUssRUFBQyxNQUFNLHlCQUFzQixJQUNoQyxJQUNULEtBN0JKLE1BQU0sQ0FBQyxLQUFLLENBOEJiLENBQ1AsQ0FBQyxHQUNFLElBQ0YsSUFDTSxJQUNULENBQ1IsQ0FBQztJQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcclxuXHJcbmltcG9ydCB7IEF2YXRhciwgQXZhdGFyRmFsbGJhY2ssIEF2YXRhckltYWdlIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9hdmF0YXJcIjtcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9idXR0b25cIjtcclxuaW1wb3J0IHtcclxuICBDYXJkLFxyXG4gIENhcmRDb250ZW50LFxyXG4gIENhcmREZXNjcmlwdGlvbixcclxuICBDYXJkSGVhZGVyLFxyXG4gIENhcmRUaXRsZSxcclxufSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2NhcmRcIjtcclxuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2lucHV0XCI7XHJcbmltcG9ydCB7IExhYmVsIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9sYWJlbFwiO1xyXG5pbXBvcnQge1xyXG4gIFNlbGVjdCxcclxuICBTZWxlY3RDb250ZW50LFxyXG4gIFNlbGVjdEl0ZW0sXHJcbiAgU2VsZWN0VHJpZ2dlcixcclxuICBTZWxlY3RWYWx1ZSxcclxufSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3NlbGVjdFwiO1xyXG5pbXBvcnQgeyBTZXBhcmF0b3IgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3NlcGFyYXRvclwiO1xyXG5cclxuY29uc3QgcGVvcGxlID0gW1xyXG4gIHtcclxuICAgIG5hbWU6IFwiT2xpdmlhIE1hcnRpblwiLFxyXG4gICAgZW1haWw6IFwibUBleGFtcGxlLmNvbVwiLFxyXG4gICAgYXZhdGFyOiBcIi9hdmF0YXJzLzAzLnBuZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJJc2FiZWxsYSBOZ3V5ZW5cIixcclxuICAgIGVtYWlsOiBcImJAZXhhbXBsZS5jb21cIixcclxuICAgIGF2YXRhcjogXCIvYXZhdGFycy8wNC5wbmdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiU29maWEgRGF2aXNcIixcclxuICAgIGVtYWlsOiBcInBAZXhhbXBsZS5jb21cIixcclxuICAgIGF2YXRhcjogXCIvYXZhdGFycy8wNS5wbmdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiRXRoYW4gVGhvbXBzb25cIixcclxuICAgIGVtYWlsOiBcImVAZXhhbXBsZS5jb21cIixcclxuICAgIGF2YXRhcjogXCIvYXZhdGFycy8wMS5wbmdcIixcclxuICB9LFxyXG5dO1xyXG5leHBvcnQgZnVuY3Rpb24gQ2FyZHNTaGFyZSgpIHtcclxuICByZXR1cm4gKFxyXG4gICAgPENhcmQ+XHJcbiAgICAgIDxDYXJkSGVhZGVyPlxyXG4gICAgICAgIDxDYXJkVGl0bGU+U2hhcmUgdGhpcyBkb2N1bWVudDwvQ2FyZFRpdGxlPlxyXG4gICAgICAgIDxDYXJkRGVzY3JpcHRpb24+XHJcbiAgICAgICAgICBBbnlvbmUgd2l0aCB0aGUgbGluayBjYW4gdmlldyB0aGlzIGRvY3VtZW50LlxyXG4gICAgICAgIDwvQ2FyZERlc2NyaXB0aW9uPlxyXG4gICAgICA8L0NhcmRIZWFkZXI+XHJcbiAgICAgIDxDYXJkQ29udGVudD5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XHJcbiAgICAgICAgICA8TGFiZWwgaHRtbEZvcj1cImxpbmtcIiBjbGFzc05hbWU9XCJzci1vbmx5XCI+XHJcbiAgICAgICAgICAgIExpbmtcclxuICAgICAgICAgIDwvTGFiZWw+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgaWQ9XCJsaW5rXCJcclxuICAgICAgICAgICAgdmFsdWU9XCJodHRwOi8vZXhhbXBsZS5jb20vbGluay90by9kb2N1bWVudFwiXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImgtOFwiXHJcbiAgICAgICAgICAgIHJlYWRPbmx5XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPEJ1dHRvbiBzaXplPVwic21cIiB2YXJpYW50PVwib3V0bGluZVwiIGNsYXNzTmFtZT1cInNoYWRvdy1ub25lXCI+XHJcbiAgICAgICAgICAgIENvcHkgTGlua1xyXG4gICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPFNlcGFyYXRvciBjbGFzc05hbWU9XCJteS00XCIgLz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZ2FwLTRcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LW1lZGl1bVwiPlBlb3BsZSB3aXRoIGFjY2VzczwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdhcC02XCI+XHJcbiAgICAgICAgICAgIHtwZW9wbGUubWFwKChwZXJzb24pID0+IChcclxuICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBrZXk9e3BlcnNvbi5lbWFpbH1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBnYXAtNFwiXHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtNFwiPlxyXG4gICAgICAgICAgICAgICAgICA8QXZhdGFyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxBdmF0YXJJbWFnZSBzcmM9e3BlcnNvbi5hdmF0YXJ9IGFsdD1cIkltYWdlXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8QXZhdGFyRmFsbGJhY2s+e3BlcnNvbi5uYW1lLmNoYXJBdCgwKX08L0F2YXRhckZhbGxiYWNrPlxyXG4gICAgICAgICAgICAgICAgICA8L0F2YXRhcj5cclxuICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIGxlYWRpbmctbm9uZSBmb250LW1lZGl1bVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAge3BlcnNvbi5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LW11dGVkLWZvcmVncm91bmQgdGV4dC1zbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAge3BlcnNvbi5lbWFpbH1cclxuICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0IGRlZmF1bHRWYWx1ZT1cImVkaXRcIj5cclxuICAgICAgICAgICAgICAgICAgPFNlbGVjdFRyaWdnZXJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC1hdXRvIHByLTJcIlxyXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJFZGl0XCJcclxuICAgICAgICAgICAgICAgICAgICBzaXplPVwic21cIlxyXG4gICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFZhbHVlIHBsYWNlaG9sZGVyPVwiU2VsZWN0XCIgLz5cclxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3RUcmlnZ2VyPlxyXG4gICAgICAgICAgICAgICAgICA8U2VsZWN0Q29udGVudCBhbGlnbj1cImVuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RJdGVtIHZhbHVlPVwiZWRpdFwiPkNhbiBlZGl0PC9TZWxlY3RJdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RJdGVtIHZhbHVlPVwidmlld1wiPkNhbiB2aWV3PC9TZWxlY3RJdGVtPlxyXG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdENvbnRlbnQ+XHJcbiAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9DYXJkQ29udGVudD5cclxuICAgIDwvQ2FyZD5cclxuICApO1xyXG59XHJcbiJdfQ==