define(["require", "exports", "react/jsx-runtime", "lucide-react", "@/components/ui/avatar", "@/components/ui/button", "@/components/ui/card", "@/components/ui/command", "@/components/ui/popover"], function (require, exports, jsx_runtime_1, lucide_react_1, avatar_1, button_1, card_1, command_1, popover_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CardsTeamMembers = CardsTeamMembers;
    const teamMembers = [
        {
            name: "Sofia Davis",
            email: "m@example.com",
            avatar: "/avatars/01.png",
            role: "Owner",
        },
        {
            name: "Jackson Lee",
            email: "p@example.com",
            avatar: "/avatars/02.png",
            role: "Developer",
        },
        {
            name: "Isabella Nguyen",
            email: "i@example.com",
            avatar: "/avatars/03.png",
            role: "Billing",
        },
    ];
    const roles = [
        {
            name: "Viewer",
            description: "Can view and comment.",
        },
        {
            name: "Developer",
            description: "Can view, comment and edit.",
        },
        {
            name: "Billing",
            description: "Can view, comment and manage billing.",
        },
        {
            name: "Owner",
            description: "Admin-level access to all resources.",
        },
    ];
    function CardsTeamMembers() {
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { children: "Team Members" }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: "Invite your team members to collaborate." })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "grid gap-6", children: teamMembers.map((member) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-4", children: [(0, jsx_runtime_1.jsxs)(avatar_1.Avatar, { className: "border", children: [(0, jsx_runtime_1.jsx)(avatar_1.AvatarImage, { src: member.avatar, alt: "Image" }), (0, jsx_runtime_1.jsx)(avatar_1.AvatarFallback, { children: member.name.charAt(0) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col gap-0.5", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm leading-none font-medium", children: member.name }), (0, jsx_runtime_1.jsx)("p", { className: "text-muted-foreground text-xs", children: member.email })] })] }), (0, jsx_runtime_1.jsxs)(popover_1.Popover, { children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", size: "sm", className: "ml-auto shadow-none", children: [member.role, " ", (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, {})] }) }), (0, jsx_runtime_1.jsx)(popover_1.PopoverContent, { className: "p-0", align: "end", children: (0, jsx_runtime_1.jsxs)(command_1.Command, { children: [(0, jsx_runtime_1.jsx)(command_1.CommandInput, { placeholder: "Select role..." }), (0, jsx_runtime_1.jsxs)(command_1.CommandList, { children: [(0, jsx_runtime_1.jsx)(command_1.CommandEmpty, { children: "No roles found." }), (0, jsx_runtime_1.jsx)(command_1.CommandGroup, { children: roles.map((role) => ((0, jsx_runtime_1.jsx)(command_1.CommandItem, { children: (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm font-medium", children: role.name }), (0, jsx_runtime_1.jsx)("p", { className: "text-muted-foreground", children: role.description })] }) }, role.name))) })] })] }) })] })] }, member.name))) })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVhbS1tZW1iZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZGVtby1jYXJkcy90ZWFtLW1lbWJlcnMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7SUFBQSxZQUFZLENBQUM7OztJQW1FYiw0Q0ErREM7SUF2R0QsTUFBTSxXQUFXLEdBQUc7UUFDbEI7WUFDRSxJQUFJLEVBQUUsYUFBYTtZQUNuQixLQUFLLEVBQUUsZUFBZTtZQUN0QixNQUFNLEVBQUUsaUJBQWlCO1lBQ3pCLElBQUksRUFBRSxPQUFPO1NBQ2Q7UUFDRDtZQUNFLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUssRUFBRSxlQUFlO1lBQ3RCLE1BQU0sRUFBRSxpQkFBaUI7WUFDekIsSUFBSSxFQUFFLFdBQVc7U0FDbEI7UUFDRDtZQUNFLElBQUksRUFBRSxpQkFBaUI7WUFDdkIsS0FBSyxFQUFFLGVBQWU7WUFDdEIsTUFBTSxFQUFFLGlCQUFpQjtZQUN6QixJQUFJLEVBQUUsU0FBUztTQUNoQjtLQUNGLENBQUM7SUFFRixNQUFNLEtBQUssR0FBRztRQUNaO1lBQ0UsSUFBSSxFQUFFLFFBQVE7WUFDZCxXQUFXLEVBQUUsdUJBQXVCO1NBQ3JDO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsV0FBVztZQUNqQixXQUFXLEVBQUUsNkJBQTZCO1NBQzNDO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsU0FBUztZQUNmLFdBQVcsRUFBRSx1Q0FBdUM7U0FDckQ7UUFDRDtZQUNFLElBQUksRUFBRSxPQUFPO1lBQ2IsV0FBVyxFQUFFLHNDQUFzQztTQUNwRDtLQUNGLENBQUM7SUFFRixTQUFnQixnQkFBZ0I7UUFDOUIsT0FBTyxDQUNMLHdCQUFDLFdBQUksZUFDSCx3QkFBQyxpQkFBVSxlQUNULHVCQUFDLGdCQUFTLCtCQUF5QixFQUNuQyx1QkFBQyxzQkFBZSwyREFFRSxJQUNQLEVBQ2IsdUJBQUMsa0JBQVcsSUFBQyxTQUFTLEVBQUMsWUFBWSxZQUNoQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUMzQixpQ0FFRSxTQUFTLEVBQUMseUNBQXlDLGFBRW5ELGlDQUFLLFNBQVMsRUFBQyx5QkFBeUIsYUFDdEMsd0JBQUMsZUFBTSxJQUFDLFNBQVMsRUFBQyxRQUFRLGFBQ3hCLHVCQUFDLG9CQUFXLElBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFDLE9BQU8sR0FBRyxFQUMvQyx1QkFBQyx1QkFBYyxjQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFrQixJQUNqRCxFQUNULGlDQUFLLFNBQVMsRUFBQyx1QkFBdUIsYUFDcEMsOEJBQUcsU0FBUyxFQUFDLGtDQUFrQyxZQUM1QyxNQUFNLENBQUMsSUFBSSxHQUNWLEVBQ0osOEJBQUcsU0FBUyxFQUFDLCtCQUErQixZQUFFLE1BQU0sQ0FBQyxLQUFLLEdBQUssSUFDM0QsSUFDRixFQUNOLHdCQUFDLGlCQUFPLGVBQ04sdUJBQUMsd0JBQWMsSUFBQyxPQUFPLGtCQUNyQix3QkFBQyxlQUFNLElBQ0wsT0FBTyxFQUFDLFNBQVMsRUFDakIsSUFBSSxFQUFDLElBQUksRUFDVCxTQUFTLEVBQUMscUJBQXFCLGFBRTlCLE1BQU0sQ0FBQyxJQUFJLE9BQUUsdUJBQUMsMEJBQVcsS0FBRyxJQUN0QixHQUNNLEVBQ2pCLHVCQUFDLHdCQUFjLElBQUMsU0FBUyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxZQUN6Qyx3QkFBQyxpQkFBTyxlQUNOLHVCQUFDLHNCQUFZLElBQUMsV0FBVyxFQUFDLGdCQUFnQixHQUFHLEVBQzdDLHdCQUFDLHFCQUFXLGVBQ1YsdUJBQUMsc0JBQVksa0NBQStCLEVBQzVDLHVCQUFDLHNCQUFZLGNBQ1YsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FDbkIsdUJBQUMscUJBQVcsY0FDVixpQ0FBSyxTQUFTLEVBQUMsZUFBZSxhQUM1Qiw4QkFBRyxTQUFTLEVBQUMscUJBQXFCLFlBQUUsSUFBSSxDQUFDLElBQUksR0FBSyxFQUNsRCw4QkFBRyxTQUFTLEVBQUMsdUJBQXVCLFlBQ2pDLElBQUksQ0FBQyxXQUFXLEdBQ2YsSUFDQSxJQU5VLElBQUksQ0FBQyxJQUFJLENBT2IsQ0FDZixDQUFDLEdBQ1csSUFDSCxJQUNOLEdBQ0ssSUFDVCxLQTdDTCxNQUFNLENBQUMsSUFBSSxDQThDWixDQUNQLENBQUMsR0FDVSxJQUNULENBQ1IsQ0FBQztJQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IHsgQ2hldnJvbkRvd24gfSBmcm9tIFwibHVjaWRlLXJlYWN0XCI7XG5cbmltcG9ydCB7IEF2YXRhciwgQXZhdGFyRmFsbGJhY2ssIEF2YXRhckltYWdlIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9hdmF0YXJcIjtcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvYnV0dG9uXCI7XG5pbXBvcnQge1xuICBDYXJkLFxuICBDYXJkQ29udGVudCxcbiAgQ2FyZERlc2NyaXB0aW9uLFxuICBDYXJkSGVhZGVyLFxuICBDYXJkVGl0bGUsXG59IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvY2FyZFwiO1xuaW1wb3J0IHtcbiAgQ29tbWFuZCxcbiAgQ29tbWFuZEVtcHR5LFxuICBDb21tYW5kR3JvdXAsXG4gIENvbW1hbmRJbnB1dCxcbiAgQ29tbWFuZEl0ZW0sXG4gIENvbW1hbmRMaXN0LFxufSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2NvbW1hbmRcIjtcbmltcG9ydCB7XG4gIFBvcG92ZXIsXG4gIFBvcG92ZXJDb250ZW50LFxuICBQb3BvdmVyVHJpZ2dlcixcbn0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9wb3BvdmVyXCI7XG5cbmNvbnN0IHRlYW1NZW1iZXJzID0gW1xuICB7XG4gICAgbmFtZTogXCJTb2ZpYSBEYXZpc1wiLFxuICAgIGVtYWlsOiBcIm1AZXhhbXBsZS5jb21cIixcbiAgICBhdmF0YXI6IFwiL2F2YXRhcnMvMDEucG5nXCIsXG4gICAgcm9sZTogXCJPd25lclwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJKYWNrc29uIExlZVwiLFxuICAgIGVtYWlsOiBcInBAZXhhbXBsZS5jb21cIixcbiAgICBhdmF0YXI6IFwiL2F2YXRhcnMvMDIucG5nXCIsXG4gICAgcm9sZTogXCJEZXZlbG9wZXJcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiSXNhYmVsbGEgTmd1eWVuXCIsXG4gICAgZW1haWw6IFwiaUBleGFtcGxlLmNvbVwiLFxuICAgIGF2YXRhcjogXCIvYXZhdGFycy8wMy5wbmdcIixcbiAgICByb2xlOiBcIkJpbGxpbmdcIixcbiAgfSxcbl07XG5cbmNvbnN0IHJvbGVzID0gW1xuICB7XG4gICAgbmFtZTogXCJWaWV3ZXJcIixcbiAgICBkZXNjcmlwdGlvbjogXCJDYW4gdmlldyBhbmQgY29tbWVudC5cIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiRGV2ZWxvcGVyXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQ2FuIHZpZXcsIGNvbW1lbnQgYW5kIGVkaXQuXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkJpbGxpbmdcIixcbiAgICBkZXNjcmlwdGlvbjogXCJDYW4gdmlldywgY29tbWVudCBhbmQgbWFuYWdlIGJpbGxpbmcuXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk93bmVyXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWRtaW4tbGV2ZWwgYWNjZXNzIHRvIGFsbCByZXNvdXJjZXMuXCIsXG4gIH0sXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZHNUZWFtTWVtYmVycygpIHtcbiAgcmV0dXJuIChcbiAgICA8Q2FyZD5cbiAgICAgIDxDYXJkSGVhZGVyPlxuICAgICAgICA8Q2FyZFRpdGxlPlRlYW0gTWVtYmVyczwvQ2FyZFRpdGxlPlxuICAgICAgICA8Q2FyZERlc2NyaXB0aW9uPlxuICAgICAgICAgIEludml0ZSB5b3VyIHRlYW0gbWVtYmVycyB0byBjb2xsYWJvcmF0ZS5cbiAgICAgICAgPC9DYXJkRGVzY3JpcHRpb24+XG4gICAgICA8L0NhcmRIZWFkZXI+XG4gICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPVwiZ3JpZCBnYXAtNlwiPlxuICAgICAgICB7dGVhbU1lbWJlcnMubWFwKChtZW1iZXIpID0+IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBrZXk9e21lbWJlci5uYW1lfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIGdhcC00XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC00XCI+XG4gICAgICAgICAgICAgIDxBdmF0YXIgY2xhc3NOYW1lPVwiYm9yZGVyXCI+XG4gICAgICAgICAgICAgICAgPEF2YXRhckltYWdlIHNyYz17bWVtYmVyLmF2YXRhcn0gYWx0PVwiSW1hZ2VcIiAvPlxuICAgICAgICAgICAgICAgIDxBdmF0YXJGYWxsYmFjaz57bWVtYmVyLm5hbWUuY2hhckF0KDApfTwvQXZhdGFyRmFsbGJhY2s+XG4gICAgICAgICAgICAgIDwvQXZhdGFyPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZ2FwLTAuNVwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gbGVhZGluZy1ub25lIGZvbnQtbWVkaXVtXCI+XG4gICAgICAgICAgICAgICAgICB7bWVtYmVyLm5hbWV9XG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtbXV0ZWQtZm9yZWdyb3VuZCB0ZXh0LXhzXCI+e21lbWJlci5lbWFpbH08L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8UG9wb3Zlcj5cbiAgICAgICAgICAgICAgPFBvcG92ZXJUcmlnZ2VyIGFzQ2hpbGQ+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLWF1dG8gc2hhZG93LW5vbmVcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHttZW1iZXIucm9sZX0gPENoZXZyb25Eb3duIC8+XG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDwvUG9wb3ZlclRyaWdnZXI+XG4gICAgICAgICAgICAgIDxQb3BvdmVyQ29udGVudCBjbGFzc05hbWU9XCJwLTBcIiBhbGlnbj1cImVuZFwiPlxuICAgICAgICAgICAgICAgIDxDb21tYW5kPlxuICAgICAgICAgICAgICAgICAgPENvbW1hbmRJbnB1dCBwbGFjZWhvbGRlcj1cIlNlbGVjdCByb2xlLi4uXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxDb21tYW5kTGlzdD5cbiAgICAgICAgICAgICAgICAgICAgPENvbW1hbmRFbXB0eT5ObyByb2xlcyBmb3VuZC48L0NvbW1hbmRFbXB0eT5cbiAgICAgICAgICAgICAgICAgICAgPENvbW1hbmRHcm91cD5cbiAgICAgICAgICAgICAgICAgICAgICB7cm9sZXMubWFwKChyb2xlKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29tbWFuZEl0ZW0ga2V5PXtyb2xlLm5hbWV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2xcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtbWVkaXVtXCI+e3JvbGUubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1tdXRlZC1mb3JlZ3JvdW5kXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cm9sZS5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db21tYW5kSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgPC9Db21tYW5kR3JvdXA+XG4gICAgICAgICAgICAgICAgICA8L0NvbW1hbmRMaXN0PlxuICAgICAgICAgICAgICAgIDwvQ29tbWFuZD5cbiAgICAgICAgICAgICAgPC9Qb3BvdmVyQ29udGVudD5cbiAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICA8L0NhcmRDb250ZW50PlxuICAgIDwvQ2FyZD5cbiAgKTtcbn1cbiJdfQ==