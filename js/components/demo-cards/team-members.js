define(["require", "exports", "react/jsx-runtime", "lucide-react", "@/components/ui/avatar", "@/components/ui/button", "@/components/ui/card", "@/components/ui/command", "@/components/ui/popover"], function (require, exports, jsx_runtime_1, lucide_react_1, avatar_1, button_1, card_1, command_1, popover_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CardsTeamMembers = CardsTeamMembers;
    const teamMembers = [
        {
            name: "Sofia Davis",
            email: "m@example.com",
            avatar: "/avatars/01.png",
            role: "Owner",
        },
        {
            name: "Jackson Lee",
            email: "p@example.com",
            avatar: "/avatars/02.png",
            role: "Developer",
        },
        {
            name: "Isabella Nguyen",
            email: "i@example.com",
            avatar: "/avatars/03.png",
            role: "Billing",
        },
    ];
    const roles = [
        {
            name: "Viewer",
            description: "Can view and comment.",
        },
        {
            name: "Developer",
            description: "Can view, comment and edit.",
        },
        {
            name: "Billing",
            description: "Can view, comment and manage billing.",
        },
        {
            name: "Owner",
            description: "Admin-level access to all resources.",
        },
    ];
    function CardsTeamMembers() {
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { children: "Team Members" }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: "Invite your team members to collaborate." })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "grid gap-6", children: teamMembers.map((member) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-4", children: [(0, jsx_runtime_1.jsxs)(avatar_1.Avatar, { className: "border", children: [(0, jsx_runtime_1.jsx)(avatar_1.AvatarImage, { src: member.avatar, alt: "Image" }), (0, jsx_runtime_1.jsx)(avatar_1.AvatarFallback, { children: member.name.charAt(0) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col gap-0.5", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm leading-none font-medium", children: member.name }), (0, jsx_runtime_1.jsx)("p", { className: "text-muted-foreground text-xs", children: member.email })] })] }), (0, jsx_runtime_1.jsxs)(popover_1.Popover, { children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", size: "sm", className: "ml-auto shadow-none", children: [member.role, " ", (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, {})] }) }), (0, jsx_runtime_1.jsx)(popover_1.PopoverContent, { className: "p-0", align: "end", children: (0, jsx_runtime_1.jsxs)(command_1.Command, { children: [(0, jsx_runtime_1.jsx)(command_1.CommandInput, { placeholder: "Select role..." }), (0, jsx_runtime_1.jsxs)(command_1.CommandList, { children: [(0, jsx_runtime_1.jsx)(command_1.CommandEmpty, { children: "No roles found." }), (0, jsx_runtime_1.jsx)(command_1.CommandGroup, { children: roles.map((role) => ((0, jsx_runtime_1.jsx)(command_1.CommandItem, { children: (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm font-medium", children: role.name }), (0, jsx_runtime_1.jsx)("p", { className: "text-muted-foreground", children: role.description })] }) }, role.name))) })] })] }) })] })] }, member.name))) })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,