define(["require", "exports", "react/jsx-runtime", "react", "@tanstack/react-table", "lucide-react", "@/components/ui/button", "@/components/ui/card", "@/components/ui/checkbox", "@/components/ui/dropdown-menu", "@/components/ui/input", "@/components/ui/table"], function (require, exports, jsx_runtime_1, React, react_table_1, lucide_react_1, button_1, card_1, checkbox_1, dropdown_menu_1, input_1, table_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.columns = void 0;
    exports.CardsDataTable = CardsDataTable;
    const data = [
        {
            id: "m5gr84i9",
            amount: 316,
            status: "success",
            email: "ken99@yahoo.com",
        },
        {
            id: "3u1reuv4",
            amount: 242,
            status: "success",
            email: "Abe45@gmail.com",
        },
        {
            id: "derv1ws0",
            amount: 837,
            status: "processing",
            email: "Monserrat44@gmail.com",
        },
        {
            id: "bhqecj4p",
            amount: 721,
            status: "failed",
            email: "carmella@hotmail.com",
        },
    ];
    exports.columns = [
        {
            id: "select",
            header: ({ table }) => ((0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { checked: table.getIsAllPageRowsSelected() ||
                    (table.getIsSomePageRowsSelected() ? "indeterminate" : false), onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value), "aria-label": "Select all" })),
            cell: ({ row }) => ((0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { checked: row.getIsSelected(), onCheckedChange: (value) => row.toggleSelected(!!value), "aria-label": "Select row" })),
            enableSorting: false,
            enableHiding: false,
        },
        {
            accessorKey: "status",
            header: "Status",
            cell: ({ row }) => ((0, jsx_runtime_1.jsx)("div", { className: "capitalize", children: row.getValue("status") })),
        },
        {
            accessorKey: "email",
            header: ({ column }) => {
                return ((0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "ghost", onClick: () => column.toggleSorting(column.getIsSorted() === "asc"), children: ["Email", (0, jsx_runtime_1.jsx)(lucide_react_1.ArrowUpDown, {})] }));
            },
            cell: ({ row }) => (0, jsx_runtime_1.jsx)("div", { className: "lowercase", children: row.getValue("email") }),
        },
        {
            accessorKey: "amount",
            header: () => (0, jsx_runtime_1.jsx)("div", { className: "text-right", children: "Amount" }),
            cell: ({ row }) => {
                const amount = parseFloat(row.getValue("amount"));
                // Format the amount as a dollar amount
                const formatted = new Intl.NumberFormat("en-US", {
                    style: "currency",
                    currency: "USD",
                }).format(amount);
                return (0, jsx_runtime_1.jsx)("div", { className: "text-right font-medium", children: formatted });
            },
        },
        {
            id: "actions",
            enableHiding: false,
            cell: ({ row }) => {
                const payment = row.original;
                return ((0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenu, { children: [(0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "ghost", className: "h-8 w-8 p-0", children: [(0, jsx_runtime_1.jsx)("span", { className: "sr-only", children: "Open menu" }), (0, jsx_runtime_1.jsx)(lucide_react_1.MoreHorizontal, {})] }) }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuContent, { align: "end", children: [(0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuLabel, { children: "Actions" }), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuItem, { onClick: () => navigator.clipboard.writeText(payment.id), children: "Copy payment ID" }), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuSeparator, {}), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuItem, { children: "View customer" }), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuItem, { children: "View payment details" })] })] }));
            },
        },
    ];
    function CardsDataTable() {
        var _a, _b, _c;
        const [sorting, setSorting] = React.useState([]);
        const [columnFilters, setColumnFilters] = React.useState([]);
        const [columnVisibility, setColumnVisibility] = React.useState({});
        const [rowSelection, setRowSelection] = React.useState({});
        const table = (0, react_table_1.useReactTable)({
            data,
            columns: exports.columns,
            onSortingChange: setSorting,
            onColumnFiltersChange: setColumnFilters,
            getCoreRowModel: (0, react_table_1.getCoreRowModel)(),
            getPaginationRowModel: (0, react_table_1.getPaginationRowModel)(),
            getSortedRowModel: (0, react_table_1.getSortedRowModel)(),
            getFilteredRowModel: (0, react_table_1.getFilteredRowModel)(),
            onColumnVisibilityChange: setColumnVisibility,
            onRowSelectionChange: setRowSelection,
            state: {
                sorting,
                columnFilters,
                columnVisibility,
                rowSelection,
            },
        });
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: "text-xl", children: "Payments" }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: "Manage your payments." })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsxs)("div", { className: "mb-4 flex items-center gap-4", children: [(0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Filter emails...", value: (_b = (_a = table.getColumn("email")) === null || _a === void 0 ? void 0 : _a.getFilterValue()) !== null && _b !== void 0 ? _b : "", onChange: (event) => { var _a; return (_a = table.getColumn("email")) === null || _a === void 0 ? void 0 : _a.setFilterValue(event.target.value); }, className: "max-w-sm" }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenu, { children: [(0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", className: "ml-auto", children: ["Columns ", (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, {})] }) }), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuContent, { align: "end", children: table
                                                .getAllColumns()
                                                .filter((column) => column.getCanHide())
                                                .map((column) => {
                                                return ((0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuCheckboxItem, { className: "capitalize", checked: column.getIsVisible(), onCheckedChange: (value) => column.toggleVisibility(!!value), children: column.id }, column.id));
                                            }) })] })] }), (0, jsx_runtime_1.jsx)("div", { className: "rounded-md border", children: (0, jsx_runtime_1.jsxs)(table_1.Table, { children: [(0, jsx_runtime_1.jsx)(table_1.TableHeader, { children: table.getHeaderGroups().map((headerGroup) => ((0, jsx_runtime_1.jsx)(table_1.TableRow, { children: headerGroup.headers.map((header) => {
                                                return ((0, jsx_runtime_1.jsx)(table_1.TableHead, { className: "[&:has([role=checkbox])]:pl-3", children: header.isPlaceholder
                                                        ? null
                                                        : (0, react_table_1.flexRender)(header.column.columnDef.header, header.getContext()) }, header.id));
                                            }) }, headerGroup.id))) }), (0, jsx_runtime_1.jsx)(table_1.TableBody, { children: ((_c = table.getRowModel().rows) === null || _c === void 0 ? void 0 : _c.length) ? (table.getRowModel().rows.map((row) => ((0, jsx_runtime_1.jsx)(table_1.TableRow, { "data-state": row.getIsSelected() && "selected", children: row.getVisibleCells().map((cell) => ((0, jsx_runtime_1.jsx)(table_1.TableCell, { className: "[&:has([role=checkbox])]:pl-3", children: (0, react_table_1.flexRender)(cell.column.columnDef.cell, cell.getContext()) }, cell.id))) }, row.id)))) : ((0, jsx_runtime_1.jsx)(table_1.TableRow, { children: (0, jsx_runtime_1.jsx)(table_1.TableCell, { colSpan: exports.columns.length, className: "h-24 text-center", children: "No results." }) })) })] }) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-end space-x-2 pt-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex-1 text-sm text-muted-foreground", children: [table.getFilteredSelectedRowModel().rows.length, " of", " ", table.getFilteredRowModel().rows.length, " row(s) selected."] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-x-2", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", onClick: () => table.previousPage(), disabled: !table.getCanPreviousPage(), children: "Previous" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", onClick: () => table.nextPage(), disabled: !table.getCanNextPage(), children: "Next" })] })] })] })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,