define(["require", "exports", "react/jsx-runtime", "@dnd-kit/sortable", "@dnd-kit/utilities", "@/components/ui/card", "@/components/ui/button", "class-variance-authority", "lucide-react", "@/components/ui/badge"], function (require, exports, jsx_runtime_1, sortable_1, utilities_1, card_1, button_1, class_variance_authority_1, lucide_react_1, badge_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TaskCard = TaskCard;
    function TaskCard({ task, isOverlay }) {
        const { setNodeRef, attributes, listeners, transform, transition, isDragging, } = (0, sortable_1.useSortable)({
            id: task.id,
            data: {
                type: "Task",
                task,
            },
            attributes: {
                roleDescription: "Task",
            },
        });
        const style = {
            transition,
            transform: utilities_1.CSS.Translate.toString(transform),
        };
        const variants = (0, class_variance_authority_1.cva)("gap-2 p-0", {
            variants: {
                dragging: {
                    over: "ring-2 opacity-30",
                    overlay: "ring-2 ring-primary",
                },
            },
        });
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { ref: setNodeRef, style: style, className: variants({
                dragging: isOverlay ? "overlay" : isDragging ? "over" : undefined,
            }), children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: "p-3 space-between flex flex-row border-b-2 border-secondary relative", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "ghost", ...attributes, ...listeners, className: "p-1 text-secondary-foreground/50 -ml-2 h-auto cursor-grab", children: [(0, jsx_runtime_1.jsx)("span", { className: "sr-only", children: "Move task" }), (0, jsx_runtime_1.jsx)(lucide_react_1.GripVertical, {})] }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "outline", className: "ml-auto font-semibold", children: "Task" })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "px-3 pt-3 pb-6 text-left whitespace-pre-wrap", children: task.content })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza0NhcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9kZW1vLWthbmJhbi9UYXNrQ2FyZC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBNEJBLDRCQTREQztJQTVERCxTQUFnQixRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFpQjtRQUN6RCxNQUFNLEVBQ0osVUFBVSxFQUNWLFVBQVUsRUFDVixTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEdBQ1gsR0FBRyxJQUFBLHNCQUFXLEVBQUM7WUFDZCxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDWCxJQUFJLEVBQUU7Z0JBQ0osSUFBSSxFQUFFLE1BQU07Z0JBQ1osSUFBSTthQUNrQjtZQUN4QixVQUFVLEVBQUU7Z0JBQ1YsZUFBZSxFQUFFLE1BQU07YUFDeEI7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRztZQUNaLFVBQVU7WUFDVixTQUFTLEVBQUUsZUFBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO1NBQzdDLENBQUM7UUFFRixNQUFNLFFBQVEsR0FBRyxJQUFBLDhCQUFHLEVBQUMsV0FBVyxFQUFFO1lBQ2hDLFFBQVEsRUFBRTtnQkFDUixRQUFRLEVBQUU7b0JBQ1IsSUFBSSxFQUFFLG1CQUFtQjtvQkFDekIsT0FBTyxFQUFFLHFCQUFxQjtpQkFDL0I7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FDTCx3QkFBQyxXQUFJLElBQ0gsR0FBRyxFQUFFLFVBQVUsRUFDZixLQUFLLEVBQUUsS0FBSyxFQUNaLFNBQVMsRUFBRSxRQUFRLENBQUM7Z0JBQ2xCLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVM7YUFDbEUsQ0FBQyxhQUVGLHdCQUFDLGlCQUFVLElBQUMsU0FBUyxFQUFDLHNFQUFzRSxhQUMxRix3QkFBQyxlQUFNLElBQ0wsT0FBTyxFQUFFLE9BQU8sS0FDWixVQUFVLEtBQ1YsU0FBUyxFQUNiLFNBQVMsRUFBQywyREFBMkQsYUFFckUsaUNBQU0sU0FBUyxFQUFDLFNBQVMsMEJBQWlCLEVBQzFDLHVCQUFDLDJCQUFZLEtBQUcsSUFDVCxFQUNULHVCQUFDLGFBQUssSUFBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBQyx1QkFBdUIscUJBRXBELElBQ0csRUFDYix1QkFBQyxrQkFBVyxJQUFDLFNBQVMsRUFBQyw4Q0FBOEMsWUFDbEUsSUFBSSxDQUFDLE9BQU8sR0FDRCxJQUNULENBQ1IsQ0FBQztJQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFVuaXF1ZUlkZW50aWZpZXIgfSBmcm9tIFwiQGRuZC1raXQvY29yZVwiO1xyXG5pbXBvcnQgeyB1c2VTb3J0YWJsZSB9IGZyb20gXCJAZG5kLWtpdC9zb3J0YWJsZVwiO1xyXG5pbXBvcnQgeyBDU1MgfSBmcm9tIFwiQGRuZC1raXQvdXRpbGl0aWVzXCI7XHJcbmltcG9ydCB7IENhcmQsIENhcmRDb250ZW50LCBDYXJkSGVhZGVyIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9jYXJkXCI7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvYnV0dG9uXCI7XHJcbmltcG9ydCB7IGN2YSB9IGZyb20gXCJjbGFzcy12YXJpYW5jZS1hdXRob3JpdHlcIjtcclxuaW1wb3J0IHsgR3JpcFZlcnRpY2FsIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xyXG5pbXBvcnQgeyBCYWRnZSB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvYmFkZ2VcIjtcclxuaW1wb3J0IHsgQ29sdW1uSWQgfSBmcm9tIFwiLi9LYW5iYW5Cb2FyZFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUYXNrIHtcclxuICBpZDogVW5pcXVlSWRlbnRpZmllcjtcclxuICBjb2x1bW5JZDogQ29sdW1uSWQ7XHJcbiAgY29udGVudDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgVGFza0NhcmRQcm9wcyB7XHJcbiAgdGFzazogVGFzaztcclxuICBpc092ZXJsYXk/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBUYXNrVHlwZSA9IFwiVGFza1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUYXNrRHJhZ0RhdGEge1xyXG4gIHR5cGU6IFRhc2tUeXBlO1xyXG4gIHRhc2s6IFRhc2s7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBUYXNrQ2FyZCh7IHRhc2ssIGlzT3ZlcmxheSB9OiBUYXNrQ2FyZFByb3BzKSB7XHJcbiAgY29uc3Qge1xyXG4gICAgc2V0Tm9kZVJlZixcclxuICAgIGF0dHJpYnV0ZXMsXHJcbiAgICBsaXN0ZW5lcnMsXHJcbiAgICB0cmFuc2Zvcm0sXHJcbiAgICB0cmFuc2l0aW9uLFxyXG4gICAgaXNEcmFnZ2luZyxcclxuICB9ID0gdXNlU29ydGFibGUoe1xyXG4gICAgaWQ6IHRhc2suaWQsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIHR5cGU6IFwiVGFza1wiLFxyXG4gICAgICB0YXNrLFxyXG4gICAgfSBzYXRpc2ZpZXMgVGFza0RyYWdEYXRhLFxyXG4gICAgYXR0cmlidXRlczoge1xyXG4gICAgICByb2xlRGVzY3JpcHRpb246IFwiVGFza1wiLFxyXG4gICAgfSxcclxuICB9KTtcclxuXHJcbiAgY29uc3Qgc3R5bGUgPSB7XHJcbiAgICB0cmFuc2l0aW9uLFxyXG4gICAgdHJhbnNmb3JtOiBDU1MuVHJhbnNsYXRlLnRvU3RyaW5nKHRyYW5zZm9ybSksXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdmFyaWFudHMgPSBjdmEoXCJnYXAtMiBwLTBcIiwge1xyXG4gICAgdmFyaWFudHM6IHtcclxuICAgICAgZHJhZ2dpbmc6IHtcclxuICAgICAgICBvdmVyOiBcInJpbmctMiBvcGFjaXR5LTMwXCIsXHJcbiAgICAgICAgb3ZlcmxheTogXCJyaW5nLTIgcmluZy1wcmltYXJ5XCIsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPENhcmRcclxuICAgICAgcmVmPXtzZXROb2RlUmVmfVxyXG4gICAgICBzdHlsZT17c3R5bGV9XHJcbiAgICAgIGNsYXNzTmFtZT17dmFyaWFudHMoe1xyXG4gICAgICAgIGRyYWdnaW5nOiBpc092ZXJsYXkgPyBcIm92ZXJsYXlcIiA6IGlzRHJhZ2dpbmcgPyBcIm92ZXJcIiA6IHVuZGVmaW5lZCxcclxuICAgICAgfSl9XHJcbiAgICA+XHJcbiAgICAgIDxDYXJkSGVhZGVyIGNsYXNzTmFtZT1cInAtMyBzcGFjZS1iZXR3ZWVuIGZsZXggZmxleC1yb3cgYm9yZGVyLWItMiBib3JkZXItc2Vjb25kYXJ5IHJlbGF0aXZlXCI+XHJcbiAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgdmFyaWFudD17XCJnaG9zdFwifVxyXG4gICAgICAgICAgey4uLmF0dHJpYnV0ZXN9XHJcbiAgICAgICAgICB7Li4ubGlzdGVuZXJzfVxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwicC0xIHRleHQtc2Vjb25kYXJ5LWZvcmVncm91bmQvNTAgLW1sLTIgaC1hdXRvIGN1cnNvci1ncmFiXCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzci1vbmx5XCI+TW92ZSB0YXNrPC9zcGFuPlxyXG4gICAgICAgICAgPEdyaXBWZXJ0aWNhbCAvPlxyXG4gICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgIDxCYWRnZSB2YXJpYW50PXtcIm91dGxpbmVcIn0gY2xhc3NOYW1lPVwibWwtYXV0byBmb250LXNlbWlib2xkXCI+XHJcbiAgICAgICAgICBUYXNrXHJcbiAgICAgICAgPC9CYWRnZT5cclxuICAgICAgPC9DYXJkSGVhZGVyPlxyXG4gICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPVwicHgtMyBwdC0zIHBiLTYgdGV4dC1sZWZ0IHdoaXRlc3BhY2UtcHJlLXdyYXBcIj5cclxuICAgICAgICB7dGFzay5jb250ZW50fVxyXG4gICAgICA8L0NhcmRDb250ZW50PlxyXG4gICAgPC9DYXJkPlxyXG4gICk7XHJcbn1cclxuIl19