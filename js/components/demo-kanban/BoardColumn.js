define(["require", "exports", "react/jsx-runtime", "@dnd-kit/sortable", "@dnd-kit/core", "@dnd-kit/utilities", "react", "./TaskCard", "class-variance-authority", "@/components/ui/card", "@/components/ui/button", "lucide-react", "@/components/ui/scroll-area"], function (require, exports, jsx_runtime_1, sortable_1, core_1, utilities_1, react_1, TaskCard_1, class_variance_authority_1, card_1, button_1, lucide_react_1, scroll_area_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BoardColumn = BoardColumn;
    exports.BoardContainer = BoardContainer;
    function BoardColumn({ column, tasks, isOverlay }) {
        const tasksIds = (0, react_1.useMemo)(() => {
            return tasks.map((task) => task.id);
        }, [tasks]);
        const { setNodeRef, attributes, listeners, transform, transition, isDragging, } = (0, sortable_1.useSortable)({
            id: column.id,
            data: {
                type: "Column",
                column,
            },
            attributes: {
                roleDescription: `Column: ${column.title}`,
            },
        });
        const style = {
            transition,
            transform: utilities_1.CSS.Translate.toString(transform),
        };
        const variants = (0, class_variance_authority_1.cva)("h-[500px] max-h-[500px] w-[350px] max-w-full bg-primary-foreground flex flex-col flex-shrink-0 snap-center", {
            variants: {
                dragging: {
                    default: "border-2 border-transparent",
                    over: "ring-2 opacity-30",
                    overlay: "ring-2 ring-primary",
                },
            },
        });
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { ref: setNodeRef, style: style, className: variants({
                dragging: isOverlay ? "overlay" : isDragging ? "over" : undefined,
            }), children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: "p-4 font-semibold border-b-2 text-left flex flex-row space-between items-center", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "ghost", ...attributes, ...listeners, className: " p-1 text-primary/50 -ml-2 h-auto cursor-grab relative", children: [(0, jsx_runtime_1.jsx)("span", { className: "sr-only", children: `Move column: ${column.title}` }), (0, jsx_runtime_1.jsx)(lucide_react_1.GripVertical, {})] }), (0, jsx_runtime_1.jsxs)("span", { className: "ml-auto", children: [" ", column.title] })] }), (0, jsx_runtime_1.jsx)(scroll_area_1.ScrollArea, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "flex flex-grow flex-col gap-2 p-2", children: (0, jsx_runtime_1.jsx)(sortable_1.SortableContext, { items: tasksIds, children: tasks.map((task) => ((0, jsx_runtime_1.jsx)(TaskCard_1.TaskCard, { task: task }, task.id))) }) }) })] }));
    }
    function BoardContainer({ children }) {
        const dndContext = (0, core_1.useDndContext)();
        const variations = (0, class_variance_authority_1.cva)("px-2 md:px-0 flex lg:justify-center pb-4", {
            variants: {
                dragging: {
                    default: "snap-x snap-mandatory",
                    active: "snap-none",
                },
            },
        });
        return ((0, jsx_runtime_1.jsxs)(scroll_area_1.ScrollArea, { className: variations({
                dragging: dndContext.active ? "active" : "default",
            }), children: [(0, jsx_runtime_1.jsx)("div", { className: "flex gap-4 items-center flex-row", children: children }), (0, jsx_runtime_1.jsx)(scroll_area_1.ScrollBar, { orientation: "horizontal" })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9hcmRDb2x1bW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9kZW1vLWthbmJhbi9Cb2FyZENvbHVtbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBNkJBLGtDQXdFQztJQUVELHdDQXNCQztJQWhHRCxTQUFnQixXQUFXLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBb0I7UUFDeEUsTUFBTSxRQUFRLEdBQUcsSUFBQSxlQUFPLEVBQUMsR0FBRyxFQUFFO1lBQzVCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFWixNQUFNLEVBQ0osVUFBVSxFQUNWLFVBQVUsRUFDVixTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEdBQ1gsR0FBRyxJQUFBLHNCQUFXLEVBQUM7WUFDZCxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDYixJQUFJLEVBQUU7Z0JBQ0osSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsTUFBTTthQUNrQjtZQUMxQixVQUFVLEVBQUU7Z0JBQ1YsZUFBZSxFQUFFLFdBQVcsTUFBTSxDQUFDLEtBQUssRUFBRTthQUMzQztTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sS0FBSyxHQUFHO1lBQ1osVUFBVTtZQUNWLFNBQVMsRUFBRSxlQUFHLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7U0FDN0MsQ0FBQztRQUVGLE1BQU0sUUFBUSxHQUFHLElBQUEsOEJBQUcsRUFDbEIsNEdBQTRHLEVBQzVHO1lBQ0UsUUFBUSxFQUFFO2dCQUNSLFFBQVEsRUFBRTtvQkFDUixPQUFPLEVBQUUsNkJBQTZCO29CQUN0QyxJQUFJLEVBQUUsbUJBQW1CO29CQUN6QixPQUFPLEVBQUUscUJBQXFCO2lCQUMvQjthQUNGO1NBQ0YsQ0FDRixDQUFDO1FBRUYsT0FBTyxDQUNMLHdCQUFDLFdBQUksSUFDSCxHQUFHLEVBQUUsVUFBVSxFQUNmLEtBQUssRUFBRSxLQUFLLEVBQ1osU0FBUyxFQUFFLFFBQVEsQ0FBQztnQkFDbEIsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUzthQUNsRSxDQUFDLGFBRUYsd0JBQUMsaUJBQVUsSUFBQyxTQUFTLEVBQUMsaUZBQWlGLGFBQ3JHLHdCQUFDLGVBQU0sSUFDTCxPQUFPLEVBQUUsT0FBTyxLQUNaLFVBQVUsS0FDVixTQUFTLEVBQ2IsU0FBUyxFQUFDLHdEQUF3RCxhQUVsRSxpQ0FBTSxTQUFTLEVBQUMsU0FBUyxZQUFFLGdCQUFnQixNQUFNLENBQUMsS0FBSyxFQUFFLEdBQVEsRUFDakUsdUJBQUMsMkJBQVksS0FBRyxJQUNULEVBQ1Qsa0NBQU0sU0FBUyxFQUFDLFNBQVMsa0JBQUcsTUFBTSxDQUFDLEtBQUssSUFBUSxJQUNyQyxFQUNiLHVCQUFDLHdCQUFVLGNBQ1QsdUJBQUMsa0JBQVcsSUFBQyxTQUFTLEVBQUMsbUNBQW1DLFlBQ3hELHVCQUFDLDBCQUFlLElBQUMsS0FBSyxFQUFFLFFBQVEsWUFDN0IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FDbkIsdUJBQUMsbUJBQVEsSUFBZSxJQUFJLEVBQUUsSUFBSSxJQUFuQixJQUFJLENBQUMsRUFBRSxDQUFnQixDQUN2QyxDQUFDLEdBQ2MsR0FDTixHQUNILElBQ1IsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELFNBQWdCLGNBQWMsQ0FBQyxFQUFFLFFBQVEsRUFBaUM7UUFDeEUsTUFBTSxVQUFVLEdBQUcsSUFBQSxvQkFBYSxHQUFFLENBQUM7UUFFbkMsTUFBTSxVQUFVLEdBQUcsSUFBQSw4QkFBRyxFQUFDLDBDQUEwQyxFQUFFO1lBQ2pFLFFBQVEsRUFBRTtnQkFDUixRQUFRLEVBQUU7b0JBQ1IsT0FBTyxFQUFFLHVCQUF1QjtvQkFDaEMsTUFBTSxFQUFFLFdBQVc7aUJBQ3BCO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPLENBQ0wsd0JBQUMsd0JBQVUsSUFDVCxTQUFTLEVBQUUsVUFBVSxDQUFDO2dCQUNwQixRQUFRLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTO2FBQ25ELENBQUMsYUFFRixnQ0FBSyxTQUFTLEVBQUMsa0NBQWtDLFlBQUUsUUFBUSxHQUFPLEVBQ2xFLHVCQUFDLHVCQUFTLElBQUMsV0FBVyxFQUFDLFlBQVksR0FBRyxJQUMzQixDQUNkLENBQUM7SUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU29ydGFibGVDb250ZXh0LCB1c2VTb3J0YWJsZSB9IGZyb20gXCJAZG5kLWtpdC9zb3J0YWJsZVwiO1xuaW1wb3J0IHsgdXNlRG5kQ29udGV4dCwgdHlwZSBVbmlxdWVJZGVudGlmaWVyIH0gZnJvbSBcIkBkbmQta2l0L2NvcmVcIjtcbmltcG9ydCB7IENTUyB9IGZyb20gXCJAZG5kLWtpdC91dGlsaXRpZXNcIjtcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFRhc2ssIFRhc2tDYXJkIH0gZnJvbSBcIi4vVGFza0NhcmRcIjtcbmltcG9ydCB7IGN2YSB9IGZyb20gXCJjbGFzcy12YXJpYW5jZS1hdXRob3JpdHlcIjtcbmltcG9ydCB7IENhcmQsIENhcmRDb250ZW50LCBDYXJkSGVhZGVyIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9jYXJkXCI7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2J1dHRvblwiO1xuaW1wb3J0IHsgR3JpcFZlcnRpY2FsIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuaW1wb3J0IHsgU2Nyb2xsQXJlYSwgU2Nyb2xsQmFyIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9zY3JvbGwtYXJlYVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbHVtbiB7XG4gIGlkOiBVbmlxdWVJZGVudGlmaWVyO1xuICB0aXRsZTogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBDb2x1bW5UeXBlID0gXCJDb2x1bW5cIjtcblxuZXhwb3J0IGludGVyZmFjZSBDb2x1bW5EcmFnRGF0YSB7XG4gIHR5cGU6IENvbHVtblR5cGU7XG4gIGNvbHVtbjogQ29sdW1uO1xufVxuXG5pbnRlcmZhY2UgQm9hcmRDb2x1bW5Qcm9wcyB7XG4gIGNvbHVtbjogQ29sdW1uO1xuICB0YXNrczogVGFza1tdO1xuICBpc092ZXJsYXk/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQm9hcmRDb2x1bW4oeyBjb2x1bW4sIHRhc2tzLCBpc092ZXJsYXkgfTogQm9hcmRDb2x1bW5Qcm9wcykge1xuICBjb25zdCB0YXNrc0lkcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB0YXNrcy5tYXAoKHRhc2spID0+IHRhc2suaWQpO1xuICB9LCBbdGFza3NdKTtcblxuICBjb25zdCB7XG4gICAgc2V0Tm9kZVJlZixcbiAgICBhdHRyaWJ1dGVzLFxuICAgIGxpc3RlbmVycyxcbiAgICB0cmFuc2Zvcm0sXG4gICAgdHJhbnNpdGlvbixcbiAgICBpc0RyYWdnaW5nLFxuICB9ID0gdXNlU29ydGFibGUoe1xuICAgIGlkOiBjb2x1bW4uaWQsXG4gICAgZGF0YToge1xuICAgICAgdHlwZTogXCJDb2x1bW5cIixcbiAgICAgIGNvbHVtbixcbiAgICB9IHNhdGlzZmllcyBDb2x1bW5EcmFnRGF0YSxcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICByb2xlRGVzY3JpcHRpb246IGBDb2x1bW46ICR7Y29sdW1uLnRpdGxlfWAsXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3Qgc3R5bGUgPSB7XG4gICAgdHJhbnNpdGlvbixcbiAgICB0cmFuc2Zvcm06IENTUy5UcmFuc2xhdGUudG9TdHJpbmcodHJhbnNmb3JtKSxcbiAgfTtcblxuICBjb25zdCB2YXJpYW50cyA9IGN2YShcbiAgICBcImgtWzUwMHB4XSBtYXgtaC1bNTAwcHhdIHctWzM1MHB4XSBtYXgtdy1mdWxsIGJnLXByaW1hcnktZm9yZWdyb3VuZCBmbGV4IGZsZXgtY29sIGZsZXgtc2hyaW5rLTAgc25hcC1jZW50ZXJcIixcbiAgICB7XG4gICAgICB2YXJpYW50czoge1xuICAgICAgICBkcmFnZ2luZzoge1xuICAgICAgICAgIGRlZmF1bHQ6IFwiYm9yZGVyLTIgYm9yZGVyLXRyYW5zcGFyZW50XCIsXG4gICAgICAgICAgb3ZlcjogXCJyaW5nLTIgb3BhY2l0eS0zMFwiLFxuICAgICAgICAgIG92ZXJsYXk6IFwicmluZy0yIHJpbmctcHJpbWFyeVwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPENhcmRcbiAgICAgIHJlZj17c2V0Tm9kZVJlZn1cbiAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgIGNsYXNzTmFtZT17dmFyaWFudHMoe1xuICAgICAgICBkcmFnZ2luZzogaXNPdmVybGF5ID8gXCJvdmVybGF5XCIgOiBpc0RyYWdnaW5nID8gXCJvdmVyXCIgOiB1bmRlZmluZWQsXG4gICAgICB9KX1cbiAgICA+XG4gICAgICA8Q2FyZEhlYWRlciBjbGFzc05hbWU9XCJwLTQgZm9udC1zZW1pYm9sZCBib3JkZXItYi0yIHRleHQtbGVmdCBmbGV4IGZsZXgtcm93IHNwYWNlLWJldHdlZW4gaXRlbXMtY2VudGVyXCI+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB2YXJpYW50PXtcImdob3N0XCJ9XG4gICAgICAgICAgey4uLmF0dHJpYnV0ZXN9XG4gICAgICAgICAgey4uLmxpc3RlbmVyc31cbiAgICAgICAgICBjbGFzc05hbWU9XCIgcC0xIHRleHQtcHJpbWFyeS81MCAtbWwtMiBoLWF1dG8gY3Vyc29yLWdyYWIgcmVsYXRpdmVcIlxuICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic3Itb25seVwiPntgTW92ZSBjb2x1bW46ICR7Y29sdW1uLnRpdGxlfWB9PC9zcGFuPlxuICAgICAgICAgIDxHcmlwVmVydGljYWwgLz5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1sLWF1dG9cIj4ge2NvbHVtbi50aXRsZX08L3NwYW4+XG4gICAgICA8L0NhcmRIZWFkZXI+XG4gICAgICA8U2Nyb2xsQXJlYT5cbiAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT1cImZsZXggZmxleC1ncm93IGZsZXgtY29sIGdhcC0yIHAtMlwiPlxuICAgICAgICAgIDxTb3J0YWJsZUNvbnRleHQgaXRlbXM9e3Rhc2tzSWRzfT5cbiAgICAgICAgICAgIHt0YXNrcy5tYXAoKHRhc2spID0+IChcbiAgICAgICAgICAgICAgPFRhc2tDYXJkIGtleT17dGFzay5pZH0gdGFzaz17dGFza30gLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvU29ydGFibGVDb250ZXh0PlxuICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgPC9TY3JvbGxBcmVhPlxuICAgIDwvQ2FyZD5cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEJvYXJkQ29udGFpbmVyKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pIHtcbiAgY29uc3QgZG5kQ29udGV4dCA9IHVzZURuZENvbnRleHQoKTtcblxuICBjb25zdCB2YXJpYXRpb25zID0gY3ZhKFwicHgtMiBtZDpweC0wIGZsZXggbGc6anVzdGlmeS1jZW50ZXIgcGItNFwiLCB7XG4gICAgdmFyaWFudHM6IHtcbiAgICAgIGRyYWdnaW5nOiB7XG4gICAgICAgIGRlZmF1bHQ6IFwic25hcC14IHNuYXAtbWFuZGF0b3J5XCIsXG4gICAgICAgIGFjdGl2ZTogXCJzbmFwLW5vbmVcIixcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8U2Nyb2xsQXJlYVxuICAgICAgY2xhc3NOYW1lPXt2YXJpYXRpb25zKHtcbiAgICAgICAgZHJhZ2dpbmc6IGRuZENvbnRleHQuYWN0aXZlID8gXCJhY3RpdmVcIiA6IFwiZGVmYXVsdFwiLFxuICAgICAgfSl9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGdhcC00IGl0ZW1zLWNlbnRlciBmbGV4LXJvd1wiPntjaGlsZHJlbn08L2Rpdj5cbiAgICAgIDxTY3JvbGxCYXIgb3JpZW50YXRpb249XCJob3Jpem9udGFsXCIgLz5cbiAgICA8L1Njcm9sbEFyZWE+XG4gICk7XG59XG4iXX0=