define(["require", "exports", "react/jsx-runtime", "@dnd-kit/sortable", "@dnd-kit/core", "@dnd-kit/utilities", "react", "./TaskCard", "class-variance-authority", "@/components/ui/card", "@/components/ui/button", "lucide-react", "@/components/ui/scroll-area"], function (require, exports, jsx_runtime_1, sortable_1, core_1, utilities_1, react_1, TaskCard_1, class_variance_authority_1, card_1, button_1, lucide_react_1, scroll_area_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BoardColumn = BoardColumn;
    exports.BoardContainer = BoardContainer;
    function BoardColumn({ column, tasks, isOverlay }) {
        const tasksIds = (0, react_1.useMemo)(() => {
            return tasks.map((task) => task.id);
        }, [tasks]);
        const { setNodeRef, attributes, listeners, transform, transition, isDragging, } = (0, sortable_1.useSortable)({
            id: column.id,
            data: {
                type: "Column",
                column,
            },
            attributes: {
                roleDescription: `Column: ${column.title}`,
            },
        });
        const style = {
            transition,
            transform: utilities_1.CSS.Translate.toString(transform),
        };
        const variants = (0, class_variance_authority_1.cva)("h-[420px] lg:w-[350px] py-0 overflow-hidden mb-1 max-w-full bg-primary-foreground flex flex-col flex-shrink-0 gap-0 snap-center", {
            variants: {
                dragging: {
                    default: "border-2 border-transparent",
                    over: "ring-2 opacity-30",
                    overlay: "ring-2 ring-primary",
                },
            },
        });
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { ref: setNodeRef, style: style, className: variants({
                dragging: isOverlay ? "overlay" : isDragging ? "over" : undefined,
            }), children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: "p-4 font-semibold border-b-2 text-left flex flex-row space-between items-center", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "ghost", ...attributes, ...listeners, className: " p-1 text-primary/50 -ml-2 h-auto cursor-grab relative", children: [(0, jsx_runtime_1.jsx)("span", { className: "sr-only", children: `Move column: ${column.title}` }), (0, jsx_runtime_1.jsx)(lucide_react_1.GripVertical, {})] }), (0, jsx_runtime_1.jsxs)("span", { className: "ml-auto", children: [" ", column.title] })] }), (0, jsx_runtime_1.jsx)(scroll_area_1.ScrollArea, { className: "overflow-hidden", children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "flex flex-col gap-2 p-2", children: (0, jsx_runtime_1.jsx)(sortable_1.SortableContext, { items: tasksIds, children: tasks.map((task) => ((0, jsx_runtime_1.jsx)(TaskCard_1.TaskCard, { task: task }, task.id))) }) }) })] }));
    }
    function BoardContainer({ children }) {
        const dndContext = (0, core_1.useDndContext)();
        const variations = (0, class_variance_authority_1.cva)("flex lg:justify-center pb-4", {
            variants: {
                dragging: {
                    default: "snap-x snap-mandatory",
                    active: "snap-none",
                },
            },
        });
        return ((0, jsx_runtime_1.jsxs)(scroll_area_1.ScrollArea, { className: variations({
                dragging: dndContext.active ? "active" : "default",
            }), children: [(0, jsx_runtime_1.jsx)("div", { className: "flex gap-4 flex-col lg:flex-row lg:items-center", children: children }), (0, jsx_runtime_1.jsx)(scroll_area_1.ScrollBar, { orientation: "horizontal" })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,